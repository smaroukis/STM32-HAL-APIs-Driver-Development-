
01-Blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005324  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080054d4  080054d4  000154d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054ec  080054ec  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080054ec  080054ec  000154ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054f4  080054f4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054f4  080054f4  000154f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054f8  080054f8  000154f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080054fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000574  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000584  20000584  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019453  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000039db  00000000  00000000  000394d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001598  00000000  00000000  0003ceb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001092  00000000  00000000  0003e450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026425  00000000  00000000  0003f4e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019766  00000000  00000000  00065907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f117a  00000000  00000000  0007f06d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005b24  00000000  00000000  001701e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  00175d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080054bc 	.word	0x080054bc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	080054bc 	.word	0x080054bc

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004f0:	4b0e      	ldr	r3, [pc, #56]	; (800052c <HAL_Init+0x40>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a0d      	ldr	r2, [pc, #52]	; (800052c <HAL_Init+0x40>)
 80004f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004fc:	4b0b      	ldr	r3, [pc, #44]	; (800052c <HAL_Init+0x40>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a0a      	ldr	r2, [pc, #40]	; (800052c <HAL_Init+0x40>)
 8000502:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000506:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <HAL_Init+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a07      	ldr	r2, [pc, #28]	; (800052c <HAL_Init+0x40>)
 800050e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000512:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000514:	2003      	movs	r0, #3
 8000516:	f000 f8fc 	bl	8000712 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800051a:	2000      	movs	r0, #0
 800051c:	f004 fe12 	bl	8005144 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000520:	f004 fdc2 	bl	80050a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000524:	2300      	movs	r3, #0
}
 8000526:	4618      	mov	r0, r3
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40023c00 	.word	0x40023c00

08000530 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <HAL_IncTick+0x20>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	461a      	mov	r2, r3
 800053a:	4b06      	ldr	r3, [pc, #24]	; (8000554 <HAL_IncTick+0x24>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4413      	add	r3, r2
 8000540:	4a04      	ldr	r2, [pc, #16]	; (8000554 <HAL_IncTick+0x24>)
 8000542:	6013      	str	r3, [r2, #0]
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	20000004 	.word	0x20000004
 8000554:	2000002c 	.word	0x2000002c

08000558 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  return uwTick;
 800055c:	4b03      	ldr	r3, [pc, #12]	; (800056c <HAL_GetTick+0x14>)
 800055e:	681b      	ldr	r3, [r3, #0]
}
 8000560:	4618      	mov	r0, r3
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	2000002c 	.word	0x2000002c

08000570 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000578:	f7ff ffee 	bl	8000558 <HAL_GetTick>
 800057c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000588:	d005      	beq.n	8000596 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800058a:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <HAL_Delay+0x44>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	461a      	mov	r2, r3
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	4413      	add	r3, r2
 8000594:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000596:	bf00      	nop
 8000598:	f7ff ffde 	bl	8000558 <HAL_GetTick>
 800059c:	4602      	mov	r2, r0
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	68fa      	ldr	r2, [r7, #12]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	d8f7      	bhi.n	8000598 <HAL_Delay+0x28>
  {
  }
}
 80005a8:	bf00      	nop
 80005aa:	bf00      	nop
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000004 	.word	0x20000004

080005b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f003 0307 	and.w	r3, r3, #7
 80005c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <__NVIC_SetPriorityGrouping+0x44>)
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ce:	68ba      	ldr	r2, [r7, #8]
 80005d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005d4:	4013      	ands	r3, r2
 80005d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ea:	4a04      	ldr	r2, [pc, #16]	; (80005fc <__NVIC_SetPriorityGrouping+0x44>)
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	60d3      	str	r3, [r2, #12]
}
 80005f0:	bf00      	nop
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000604:	4b04      	ldr	r3, [pc, #16]	; (8000618 <__NVIC_GetPriorityGrouping+0x18>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	0a1b      	lsrs	r3, r3, #8
 800060a:	f003 0307 	and.w	r3, r3, #7
}
 800060e:	4618      	mov	r0, r3
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062a:	2b00      	cmp	r3, #0
 800062c:	db0b      	blt.n	8000646 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	f003 021f 	and.w	r2, r3, #31
 8000634:	4907      	ldr	r1, [pc, #28]	; (8000654 <__NVIC_EnableIRQ+0x38>)
 8000636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063a:	095b      	lsrs	r3, r3, #5
 800063c:	2001      	movs	r0, #1
 800063e:	fa00 f202 	lsl.w	r2, r0, r2
 8000642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	e000e100 	.word	0xe000e100

08000658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	6039      	str	r1, [r7, #0]
 8000662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000668:	2b00      	cmp	r3, #0
 800066a:	db0a      	blt.n	8000682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	b2da      	uxtb	r2, r3
 8000670:	490c      	ldr	r1, [pc, #48]	; (80006a4 <__NVIC_SetPriority+0x4c>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	0112      	lsls	r2, r2, #4
 8000678:	b2d2      	uxtb	r2, r2
 800067a:	440b      	add	r3, r1
 800067c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000680:	e00a      	b.n	8000698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4908      	ldr	r1, [pc, #32]	; (80006a8 <__NVIC_SetPriority+0x50>)
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	f003 030f 	and.w	r3, r3, #15
 800068e:	3b04      	subs	r3, #4
 8000690:	0112      	lsls	r2, r2, #4
 8000692:	b2d2      	uxtb	r2, r2
 8000694:	440b      	add	r3, r1
 8000696:	761a      	strb	r2, [r3, #24]
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	e000e100 	.word	0xe000e100
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b089      	sub	sp, #36	; 0x24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f003 0307 	and.w	r3, r3, #7
 80006be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	f1c3 0307 	rsb	r3, r3, #7
 80006c6:	2b04      	cmp	r3, #4
 80006c8:	bf28      	it	cs
 80006ca:	2304      	movcs	r3, #4
 80006cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	3304      	adds	r3, #4
 80006d2:	2b06      	cmp	r3, #6
 80006d4:	d902      	bls.n	80006dc <NVIC_EncodePriority+0x30>
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	3b03      	subs	r3, #3
 80006da:	e000      	b.n	80006de <NVIC_EncodePriority+0x32>
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ea:	43da      	mvns	r2, r3
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	401a      	ands	r2, r3
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	fa01 f303 	lsl.w	r3, r1, r3
 80006fe:	43d9      	mvns	r1, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000704:	4313      	orrs	r3, r2
         );
}
 8000706:	4618      	mov	r0, r3
 8000708:	3724      	adds	r7, #36	; 0x24
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr

08000712 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	b082      	sub	sp, #8
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f7ff ff4c 	bl	80005b8 <__NVIC_SetPriorityGrouping>
}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]
 8000734:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800073a:	f7ff ff61 	bl	8000600 <__NVIC_GetPriorityGrouping>
 800073e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	68b9      	ldr	r1, [r7, #8]
 8000744:	6978      	ldr	r0, [r7, #20]
 8000746:	f7ff ffb1 	bl	80006ac <NVIC_EncodePriority>
 800074a:	4602      	mov	r2, r0
 800074c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000750:	4611      	mov	r1, r2
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ff80 	bl	8000658 <__NVIC_SetPriority>
}
 8000758:	bf00      	nop
 800075a:	3718      	adds	r7, #24
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800076a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff ff54 	bl	800061c <__NVIC_EnableIRQ>
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	2b00      	cmp	r3, #0
 800079c:	d026      	beq.n	80007ec <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d021      	beq.n	80007ec <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80007b6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007bc:	f043 0201 	orr.w	r2, r3, #1
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2201      	movs	r2, #1
 80007ca:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2204      	movs	r2, #4
 80007d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2200      	movs	r2, #0
 80007d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	695b      	ldr	r3, [r3, #20]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d003      	beq.n	80007ec <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	695b      	ldr	r3, [r3, #20]
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	f003 0320 	and.w	r3, r3, #32
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d026      	beq.n	8000844 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d021      	beq.n	8000844 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800080e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2220      	movs	r2, #32
 8000816:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800081c:	f043 0202 	orr.w	r2, r3, #2
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2204      	movs	r2, #4
 8000828:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2200      	movs	r2, #0
 8000830:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	695b      	ldr	r3, [r3, #20]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d003      	beq.n	8000844 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	695b      	ldr	r3, [r3, #20]
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	f003 0308 	and.w	r3, r3, #8
 800084a:	2b00      	cmp	r3, #0
 800084c:	d026      	beq.n	800089c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000854:	2b00      	cmp	r3, #0
 8000856:	d021      	beq.n	800089c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000866:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2208      	movs	r2, #8
 800086e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000874:	f043 0204 	orr.w	r2, r3, #4
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2204      	movs	r2, #4
 8000880:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2200      	movs	r2, #0
 8000888:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	695b      	ldr	r3, [r3, #20]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d003      	beq.n	800089c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	695b      	ldr	r3, [r3, #20]
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	f003 0304 	and.w	r3, r3, #4
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d013      	beq.n	80008ce <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d00e      	beq.n	80008ce <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80008be:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2204      	movs	r2, #4
 80008c6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f000 f853 	bl	8000974 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	f003 0302 	and.w	r3, r3, #2
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d024      	beq.n	8000922 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d01f      	beq.n	8000922 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80008f0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2202      	movs	r2, #2
 80008f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2201      	movs	r2, #1
 8000906:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2200      	movs	r2, #0
 800090e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	691b      	ldr	r3, [r3, #16]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d003      	beq.n	8000922 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	691b      	ldr	r3, [r3, #16]
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	f003 0310 	and.w	r3, r3, #16
 8000928:	2b00      	cmp	r3, #0
 800092a:	d01f      	beq.n	800096c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000932:	2b00      	cmp	r3, #0
 8000934:	d01a      	beq.n	800096c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000944:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2210      	movs	r2, #16
 800094c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2201      	movs	r2, #1
 800095a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2200      	movs	r2, #0
 8000962:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f000 f80e 	bl	8000988 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800096c:	bf00      	nop
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8000990:	bf00      	nop
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800099c:	b480      	push	{r7}
 800099e:	b089      	sub	sp, #36	; 0x24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
 80009b6:	e177      	b.n	8000ca8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80009b8:	2201      	movs	r2, #1
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	697a      	ldr	r2, [r7, #20]
 80009c8:	4013      	ands	r3, r2
 80009ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80009cc:	693a      	ldr	r2, [r7, #16]
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	f040 8166 	bne.w	8000ca2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	f003 0303 	and.w	r3, r3, #3
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d005      	beq.n	80009ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80009ea:	2b02      	cmp	r3, #2
 80009ec:	d130      	bne.n	8000a50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	689b      	ldr	r3, [r3, #8]
 80009f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009f4:	69fb      	ldr	r3, [r7, #28]
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	2203      	movs	r2, #3
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	43db      	mvns	r3, r3
 8000a00:	69ba      	ldr	r2, [r7, #24]
 8000a02:	4013      	ands	r3, r2
 8000a04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	68da      	ldr	r2, [r3, #12]
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	69ba      	ldr	r2, [r7, #24]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	69ba      	ldr	r2, [r7, #24]
 8000a1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a24:	2201      	movs	r2, #1
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2c:	43db      	mvns	r3, r3
 8000a2e:	69ba      	ldr	r2, [r7, #24]
 8000a30:	4013      	ands	r3, r2
 8000a32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	091b      	lsrs	r3, r3, #4
 8000a3a:	f003 0201 	and.w	r2, r3, #1
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	fa02 f303 	lsl.w	r3, r2, r3
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	69ba      	ldr	r2, [r7, #24]
 8000a4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f003 0303 	and.w	r3, r3, #3
 8000a58:	2b03      	cmp	r3, #3
 8000a5a:	d017      	beq.n	8000a8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	2203      	movs	r2, #3
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	4013      	ands	r3, r2
 8000a72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	689a      	ldr	r2, [r3, #8]
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a80:	69ba      	ldr	r2, [r7, #24]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	69ba      	ldr	r2, [r7, #24]
 8000a8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f003 0303 	and.w	r3, r3, #3
 8000a94:	2b02      	cmp	r3, #2
 8000a96:	d123      	bne.n	8000ae0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	08da      	lsrs	r2, r3, #3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3208      	adds	r2, #8
 8000aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	f003 0307 	and.w	r3, r3, #7
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	220f      	movs	r2, #15
 8000ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	69ba      	ldr	r2, [r7, #24]
 8000ab8:	4013      	ands	r3, r2
 8000aba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	691a      	ldr	r2, [r3, #16]
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8000acc:	69ba      	ldr	r2, [r7, #24]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	08da      	lsrs	r2, r3, #3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	3208      	adds	r2, #8
 8000ada:	69b9      	ldr	r1, [r7, #24]
 8000adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	2203      	movs	r2, #3
 8000aec:	fa02 f303 	lsl.w	r3, r2, r3
 8000af0:	43db      	mvns	r3, r3
 8000af2:	69ba      	ldr	r2, [r7, #24]
 8000af4:	4013      	ands	r3, r2
 8000af6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f003 0203 	and.w	r2, r3, #3
 8000b00:	69fb      	ldr	r3, [r7, #28]
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	69ba      	ldr	r2, [r7, #24]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	69ba      	ldr	r2, [r7, #24]
 8000b12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	f000 80c0 	beq.w	8000ca2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	4b66      	ldr	r3, [pc, #408]	; (8000cc0 <HAL_GPIO_Init+0x324>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	4a65      	ldr	r2, [pc, #404]	; (8000cc0 <HAL_GPIO_Init+0x324>)
 8000b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b30:	6453      	str	r3, [r2, #68]	; 0x44
 8000b32:	4b63      	ldr	r3, [pc, #396]	; (8000cc0 <HAL_GPIO_Init+0x324>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b3e:	4a61      	ldr	r2, [pc, #388]	; (8000cc4 <HAL_GPIO_Init+0x328>)
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	089b      	lsrs	r3, r3, #2
 8000b44:	3302      	adds	r3, #2
 8000b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	f003 0303 	and.w	r3, r3, #3
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	220f      	movs	r2, #15
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	43db      	mvns	r3, r3
 8000b5c:	69ba      	ldr	r2, [r7, #24]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a58      	ldr	r2, [pc, #352]	; (8000cc8 <HAL_GPIO_Init+0x32c>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d037      	beq.n	8000bda <HAL_GPIO_Init+0x23e>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a57      	ldr	r2, [pc, #348]	; (8000ccc <HAL_GPIO_Init+0x330>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d031      	beq.n	8000bd6 <HAL_GPIO_Init+0x23a>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a56      	ldr	r2, [pc, #344]	; (8000cd0 <HAL_GPIO_Init+0x334>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d02b      	beq.n	8000bd2 <HAL_GPIO_Init+0x236>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4a55      	ldr	r2, [pc, #340]	; (8000cd4 <HAL_GPIO_Init+0x338>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d025      	beq.n	8000bce <HAL_GPIO_Init+0x232>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a54      	ldr	r2, [pc, #336]	; (8000cd8 <HAL_GPIO_Init+0x33c>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d01f      	beq.n	8000bca <HAL_GPIO_Init+0x22e>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a53      	ldr	r2, [pc, #332]	; (8000cdc <HAL_GPIO_Init+0x340>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d019      	beq.n	8000bc6 <HAL_GPIO_Init+0x22a>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4a52      	ldr	r2, [pc, #328]	; (8000ce0 <HAL_GPIO_Init+0x344>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d013      	beq.n	8000bc2 <HAL_GPIO_Init+0x226>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a51      	ldr	r2, [pc, #324]	; (8000ce4 <HAL_GPIO_Init+0x348>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d00d      	beq.n	8000bbe <HAL_GPIO_Init+0x222>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a50      	ldr	r2, [pc, #320]	; (8000ce8 <HAL_GPIO_Init+0x34c>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d007      	beq.n	8000bba <HAL_GPIO_Init+0x21e>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4a4f      	ldr	r2, [pc, #316]	; (8000cec <HAL_GPIO_Init+0x350>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d101      	bne.n	8000bb6 <HAL_GPIO_Init+0x21a>
 8000bb2:	2309      	movs	r3, #9
 8000bb4:	e012      	b.n	8000bdc <HAL_GPIO_Init+0x240>
 8000bb6:	230a      	movs	r3, #10
 8000bb8:	e010      	b.n	8000bdc <HAL_GPIO_Init+0x240>
 8000bba:	2308      	movs	r3, #8
 8000bbc:	e00e      	b.n	8000bdc <HAL_GPIO_Init+0x240>
 8000bbe:	2307      	movs	r3, #7
 8000bc0:	e00c      	b.n	8000bdc <HAL_GPIO_Init+0x240>
 8000bc2:	2306      	movs	r3, #6
 8000bc4:	e00a      	b.n	8000bdc <HAL_GPIO_Init+0x240>
 8000bc6:	2305      	movs	r3, #5
 8000bc8:	e008      	b.n	8000bdc <HAL_GPIO_Init+0x240>
 8000bca:	2304      	movs	r3, #4
 8000bcc:	e006      	b.n	8000bdc <HAL_GPIO_Init+0x240>
 8000bce:	2303      	movs	r3, #3
 8000bd0:	e004      	b.n	8000bdc <HAL_GPIO_Init+0x240>
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	e002      	b.n	8000bdc <HAL_GPIO_Init+0x240>
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e000      	b.n	8000bdc <HAL_GPIO_Init+0x240>
 8000bda:	2300      	movs	r3, #0
 8000bdc:	69fa      	ldr	r2, [r7, #28]
 8000bde:	f002 0203 	and.w	r2, r2, #3
 8000be2:	0092      	lsls	r2, r2, #2
 8000be4:	4093      	lsls	r3, r2
 8000be6:	69ba      	ldr	r2, [r7, #24]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000bec:	4935      	ldr	r1, [pc, #212]	; (8000cc4 <HAL_GPIO_Init+0x328>)
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	089b      	lsrs	r3, r3, #2
 8000bf2:	3302      	adds	r3, #2
 8000bf4:	69ba      	ldr	r2, [r7, #24]
 8000bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bfa:	4b3d      	ldr	r3, [pc, #244]	; (8000cf0 <HAL_GPIO_Init+0x354>)
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	43db      	mvns	r3, r3
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	4013      	ands	r3, r2
 8000c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d003      	beq.n	8000c1e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000c16:	69ba      	ldr	r2, [r7, #24]
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000c1e:	4a34      	ldr	r2, [pc, #208]	; (8000cf0 <HAL_GPIO_Init+0x354>)
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c24:	4b32      	ldr	r3, [pc, #200]	; (8000cf0 <HAL_GPIO_Init+0x354>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	69ba      	ldr	r2, [r7, #24]
 8000c30:	4013      	ands	r3, r2
 8000c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d003      	beq.n	8000c48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000c40:	69ba      	ldr	r2, [r7, #24]
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c48:	4a29      	ldr	r2, [pc, #164]	; (8000cf0 <HAL_GPIO_Init+0x354>)
 8000c4a:	69bb      	ldr	r3, [r7, #24]
 8000c4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c4e:	4b28      	ldr	r3, [pc, #160]	; (8000cf0 <HAL_GPIO_Init+0x354>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	43db      	mvns	r3, r3
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d003      	beq.n	8000c72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000c6a:	69ba      	ldr	r2, [r7, #24]
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000c72:	4a1f      	ldr	r2, [pc, #124]	; (8000cf0 <HAL_GPIO_Init+0x354>)
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c78:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <HAL_GPIO_Init+0x354>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	43db      	mvns	r3, r3
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	4013      	ands	r3, r2
 8000c86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d003      	beq.n	8000c9c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000c9c:	4a14      	ldr	r2, [pc, #80]	; (8000cf0 <HAL_GPIO_Init+0x354>)
 8000c9e:	69bb      	ldr	r3, [r7, #24]
 8000ca0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	61fb      	str	r3, [r7, #28]
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	2b0f      	cmp	r3, #15
 8000cac:	f67f ae84 	bls.w	80009b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000cb0:	bf00      	nop
 8000cb2:	bf00      	nop
 8000cb4:	3724      	adds	r7, #36	; 0x24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	40013800 	.word	0x40013800
 8000cc8:	40020000 	.word	0x40020000
 8000ccc:	40020400 	.word	0x40020400
 8000cd0:	40020800 	.word	0x40020800
 8000cd4:	40020c00 	.word	0x40020c00
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40021400 	.word	0x40021400
 8000ce0:	40021800 	.word	0x40021800
 8000ce4:	40021c00 	.word	0x40021c00
 8000ce8:	40022000 	.word	0x40022000
 8000cec:	40022400 	.word	0x40022400
 8000cf0:	40013c00 	.word	0x40013c00

08000cf4 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	695b      	ldr	r3, [r3, #20]
 8000d04:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d06:	887a      	ldrh	r2, [r7, #2]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	041a      	lsls	r2, r3, #16
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	43d9      	mvns	r1, r3
 8000d12:	887b      	ldrh	r3, [r7, #2]
 8000d14:	400b      	ands	r3, r1
 8000d16:	431a      	orrs	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	619a      	str	r2, [r3, #24]
}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f002 fddc 	bl	80038fc <USB_GetMode>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	f040 80fb 	bne.w	8000f42 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f002 fd9f 	bl	8003894 <USB_ReadInterrupts>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	f000 80f1 	beq.w	8000f40 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f002 fd96 	bl	8003894 <USB_ReadInterrupts>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000d72:	d104      	bne.n	8000d7e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000d7c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f002 fd86 	bl	8003894 <USB_ReadInterrupts>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000d92:	d104      	bne.n	8000d9e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000d9c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f002 fd76 	bl	8003894 <USB_ReadInterrupts>
 8000da8:	4603      	mov	r3, r0
 8000daa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000dae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000db2:	d104      	bne.n	8000dbe <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000dbc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f002 fd66 	bl	8003894 <USB_ReadInterrupts>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d103      	bne.n	8000dda <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f002 fd58 	bl	8003894 <USB_ReadInterrupts>
 8000de4:	4603      	mov	r3, r0
 8000de6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000dea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000dee:	d120      	bne.n	8000e32 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000df8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d113      	bne.n	8000e32 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8000e0a:	2110      	movs	r1, #16
 8000e0c:	6938      	ldr	r0, [r7, #16]
 8000e0e:	f002 fc89 	bl	8003724 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8000e12:	6938      	ldr	r0, [r7, #16]
 8000e14:	f002 fcb8 	bl	8003788 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	7a5b      	ldrb	r3, [r3, #9]
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d105      	bne.n	8000e2c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2101      	movs	r1, #1
 8000e26:	4618      	mov	r0, r3
 8000e28:	f002 fd76 	bl	8003918 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f004 fa90 	bl	8005352 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f002 fd2c 	bl	8003894 <USB_ReadInterrupts>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e46:	d102      	bne.n	8000e4e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f001 fc87 	bl	800275c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f002 fd1e 	bl	8003894 <USB_ReadInterrupts>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	f003 0308 	and.w	r3, r3, #8
 8000e5e:	2b08      	cmp	r3, #8
 8000e60:	d106      	bne.n	8000e70 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f004 fa59 	bl	800531a <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2208      	movs	r2, #8
 8000e6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f002 fd0d 	bl	8003894 <USB_ReadInterrupts>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000e84:	d139      	bne.n	8000efa <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f002 fd81 	bl	8003992 <USB_HC_ReadInterrupt>
 8000e90:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	e025      	b.n	8000ee4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	f003 030f 	and.w	r3, r3, #15
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d018      	beq.n	8000ede <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	015a      	lsls	r2, r3, #5
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ebe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ec2:	d106      	bne.n	8000ed2 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	4619      	mov	r1, r3
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f000 f859 	bl	8000f82 <HCD_HC_IN_IRQHandler>
 8000ed0:	e005      	b.n	8000ede <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f000 febb 	bl	8001c54 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	795b      	ldrb	r3, [r3, #5]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d3d3      	bcc.n	8000e98 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ef8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f002 fcc8 	bl	8003894 <USB_ReadInterrupts>
 8000f04:	4603      	mov	r3, r0
 8000f06:	f003 0310 	and.w	r3, r3, #16
 8000f0a:	2b10      	cmp	r3, #16
 8000f0c:	d101      	bne.n	8000f12 <HAL_HCD_IRQHandler+0x1ea>
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e000      	b.n	8000f14 <HAL_HCD_IRQHandler+0x1ec>
 8000f12:	2300      	movs	r3, #0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d014      	beq.n	8000f42 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	699a      	ldr	r2, [r3, #24]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f022 0210 	bic.w	r2, r2, #16
 8000f26:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f001 fb38 	bl	800259e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	699a      	ldr	r2, [r3, #24]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f042 0210 	orr.w	r2, r2, #16
 8000f3c:	619a      	str	r2, [r3, #24]
 8000f3e:	e000      	b.n	8000f42 <HAL_HCD_IRQHandler+0x21a>
      return;
 8000f40:	bf00      	nop
    }
  }
}
 8000f42:	3718      	adds	r7, #24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d101      	bne.n	8000f5e <HAL_HCD_Stop+0x16>
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	e00d      	b.n	8000f7a <HAL_HCD_Stop+0x32>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2201      	movs	r2, #1
 8000f62:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f002 fe42 	bl	8003bf4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b086      	sub	sp, #24
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	78fa      	ldrb	r2, [r7, #3]
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f002 fc8a 	bl	80038ba <USB_ReadChInterrupts>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	f003 0304 	and.w	r3, r3, #4
 8000fac:	2b04      	cmp	r3, #4
 8000fae:	d11a      	bne.n	8000fe6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8000fb0:	78fb      	ldrb	r3, [r7, #3]
 8000fb2:	015a      	lsls	r2, r3, #5
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8000fc2:	78fa      	ldrb	r2, [r7, #3]
 8000fc4:	6879      	ldr	r1, [r7, #4]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	011b      	lsls	r3, r3, #4
 8000fca:	1a9b      	subs	r3, r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	440b      	add	r3, r1
 8000fd0:	334d      	adds	r3, #77	; 0x4d
 8000fd2:	2207      	movs	r2, #7
 8000fd4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	78fa      	ldrb	r2, [r7, #3]
 8000fdc:	4611      	mov	r1, r2
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f002 fce8 	bl	80039b4 <USB_HC_Halt>
 8000fe4:	e09e      	b.n	8001124 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	78fa      	ldrb	r2, [r7, #3]
 8000fec:	4611      	mov	r1, r2
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f002 fc63 	bl	80038ba <USB_ReadChInterrupts>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ffe:	d11b      	bne.n	8001038 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001000:	78fb      	ldrb	r3, [r7, #3]
 8001002:	015a      	lsls	r2, r3, #5
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	4413      	add	r3, r2
 8001008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800100c:	461a      	mov	r2, r3
 800100e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001012:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001014:	78fa      	ldrb	r2, [r7, #3]
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	4613      	mov	r3, r2
 800101a:	011b      	lsls	r3, r3, #4
 800101c:	1a9b      	subs	r3, r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	440b      	add	r3, r1
 8001022:	334d      	adds	r3, #77	; 0x4d
 8001024:	2208      	movs	r2, #8
 8001026:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	78fa      	ldrb	r2, [r7, #3]
 800102e:	4611      	mov	r1, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f002 fcbf 	bl	80039b4 <USB_HC_Halt>
 8001036:	e075      	b.n	8001124 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	78fa      	ldrb	r2, [r7, #3]
 800103e:	4611      	mov	r1, r2
 8001040:	4618      	mov	r0, r3
 8001042:	f002 fc3a 	bl	80038ba <USB_ReadChInterrupts>
 8001046:	4603      	mov	r3, r0
 8001048:	f003 0308 	and.w	r3, r3, #8
 800104c:	2b08      	cmp	r3, #8
 800104e:	d11a      	bne.n	8001086 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001050:	78fb      	ldrb	r3, [r7, #3]
 8001052:	015a      	lsls	r2, r3, #5
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	4413      	add	r3, r2
 8001058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800105c:	461a      	mov	r2, r3
 800105e:	2308      	movs	r3, #8
 8001060:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001062:	78fa      	ldrb	r2, [r7, #3]
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	4613      	mov	r3, r2
 8001068:	011b      	lsls	r3, r3, #4
 800106a:	1a9b      	subs	r3, r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	440b      	add	r3, r1
 8001070:	334d      	adds	r3, #77	; 0x4d
 8001072:	2206      	movs	r2, #6
 8001074:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	78fa      	ldrb	r2, [r7, #3]
 800107c:	4611      	mov	r1, r2
 800107e:	4618      	mov	r0, r3
 8001080:	f002 fc98 	bl	80039b4 <USB_HC_Halt>
 8001084:	e04e      	b.n	8001124 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	78fa      	ldrb	r2, [r7, #3]
 800108c:	4611      	mov	r1, r2
 800108e:	4618      	mov	r0, r3
 8001090:	f002 fc13 	bl	80038ba <USB_ReadChInterrupts>
 8001094:	4603      	mov	r3, r0
 8001096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800109a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800109e:	d11b      	bne.n	80010d8 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80010a0:	78fb      	ldrb	r3, [r7, #3]
 80010a2:	015a      	lsls	r2, r3, #5
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	4413      	add	r3, r2
 80010a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80010ac:	461a      	mov	r2, r3
 80010ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80010b4:	78fa      	ldrb	r2, [r7, #3]
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	4613      	mov	r3, r2
 80010ba:	011b      	lsls	r3, r3, #4
 80010bc:	1a9b      	subs	r3, r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	440b      	add	r3, r1
 80010c2:	334d      	adds	r3, #77	; 0x4d
 80010c4:	2209      	movs	r2, #9
 80010c6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	78fa      	ldrb	r2, [r7, #3]
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f002 fc6f 	bl	80039b4 <USB_HC_Halt>
 80010d6:	e025      	b.n	8001124 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	78fa      	ldrb	r2, [r7, #3]
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f002 fbea 	bl	80038ba <USB_ReadChInterrupts>
 80010e6:	4603      	mov	r3, r0
 80010e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ec:	2b80      	cmp	r3, #128	; 0x80
 80010ee:	d119      	bne.n	8001124 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80010f0:	78fb      	ldrb	r3, [r7, #3]
 80010f2:	015a      	lsls	r2, r3, #5
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4413      	add	r3, r2
 80010f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80010fc:	461a      	mov	r2, r3
 80010fe:	2380      	movs	r3, #128	; 0x80
 8001100:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001102:	78fa      	ldrb	r2, [r7, #3]
 8001104:	6879      	ldr	r1, [r7, #4]
 8001106:	4613      	mov	r3, r2
 8001108:	011b      	lsls	r3, r3, #4
 800110a:	1a9b      	subs	r3, r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	440b      	add	r3, r1
 8001110:	334d      	adds	r3, #77	; 0x4d
 8001112:	2207      	movs	r2, #7
 8001114:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	78fa      	ldrb	r2, [r7, #3]
 800111c:	4611      	mov	r1, r2
 800111e:	4618      	mov	r0, r3
 8001120:	f002 fc48 	bl	80039b4 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	78fa      	ldrb	r2, [r7, #3]
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f002 fbc4 	bl	80038ba <USB_ReadChInterrupts>
 8001132:	4603      	mov	r3, r0
 8001134:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800113c:	d112      	bne.n	8001164 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	78fa      	ldrb	r2, [r7, #3]
 8001144:	4611      	mov	r1, r2
 8001146:	4618      	mov	r0, r3
 8001148:	f002 fc34 	bl	80039b4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800114c:	78fb      	ldrb	r3, [r7, #3]
 800114e:	015a      	lsls	r2, r3, #5
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4413      	add	r3, r2
 8001154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001158:	461a      	mov	r2, r3
 800115a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800115e:	6093      	str	r3, [r2, #8]
 8001160:	f000 bd75 	b.w	8001c4e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	78fa      	ldrb	r2, [r7, #3]
 800116a:	4611      	mov	r1, r2
 800116c:	4618      	mov	r0, r3
 800116e:	f002 fba4 	bl	80038ba <USB_ReadChInterrupts>
 8001172:	4603      	mov	r3, r0
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	2b01      	cmp	r3, #1
 800117a:	f040 8128 	bne.w	80013ce <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800117e:	78fb      	ldrb	r3, [r7, #3]
 8001180:	015a      	lsls	r2, r3, #5
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	4413      	add	r3, r2
 8001186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800118a:	461a      	mov	r2, r3
 800118c:	2320      	movs	r3, #32
 800118e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001190:	78fa      	ldrb	r2, [r7, #3]
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	4613      	mov	r3, r2
 8001196:	011b      	lsls	r3, r3, #4
 8001198:	1a9b      	subs	r3, r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	440b      	add	r3, r1
 800119e:	331b      	adds	r3, #27
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d119      	bne.n	80011da <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80011a6:	78fa      	ldrb	r2, [r7, #3]
 80011a8:	6879      	ldr	r1, [r7, #4]
 80011aa:	4613      	mov	r3, r2
 80011ac:	011b      	lsls	r3, r3, #4
 80011ae:	1a9b      	subs	r3, r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	440b      	add	r3, r1
 80011b4:	331b      	adds	r3, #27
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80011ba:	78fb      	ldrb	r3, [r7, #3]
 80011bc:	015a      	lsls	r2, r3, #5
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4413      	add	r3, r2
 80011c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	78fa      	ldrb	r2, [r7, #3]
 80011ca:	0151      	lsls	r1, r2, #5
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	440a      	add	r2, r1
 80011d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80011d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011d8:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	799b      	ldrb	r3, [r3, #6]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d01b      	beq.n	800121a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80011e2:	78fa      	ldrb	r2, [r7, #3]
 80011e4:	6879      	ldr	r1, [r7, #4]
 80011e6:	4613      	mov	r3, r2
 80011e8:	011b      	lsls	r3, r3, #4
 80011ea:	1a9b      	subs	r3, r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	440b      	add	r3, r1
 80011f0:	3330      	adds	r3, #48	; 0x30
 80011f2:	6819      	ldr	r1, [r3, #0]
 80011f4:	78fb      	ldrb	r3, [r7, #3]
 80011f6:	015a      	lsls	r2, r3, #5
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	4413      	add	r3, r2
 80011fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001200:	691b      	ldr	r3, [r3, #16]
 8001202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001206:	78fa      	ldrb	r2, [r7, #3]
 8001208:	1ac9      	subs	r1, r1, r3
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	4613      	mov	r3, r2
 800120e:	011b      	lsls	r3, r3, #4
 8001210:	1a9b      	subs	r3, r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4403      	add	r3, r0
 8001216:	3338      	adds	r3, #56	; 0x38
 8001218:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800121a:	78fa      	ldrb	r2, [r7, #3]
 800121c:	6879      	ldr	r1, [r7, #4]
 800121e:	4613      	mov	r3, r2
 8001220:	011b      	lsls	r3, r3, #4
 8001222:	1a9b      	subs	r3, r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	440b      	add	r3, r1
 8001228:	334d      	adds	r3, #77	; 0x4d
 800122a:	2201      	movs	r2, #1
 800122c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800122e:	78fa      	ldrb	r2, [r7, #3]
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	4613      	mov	r3, r2
 8001234:	011b      	lsls	r3, r3, #4
 8001236:	1a9b      	subs	r3, r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	440b      	add	r3, r1
 800123c:	3344      	adds	r3, #68	; 0x44
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001242:	78fb      	ldrb	r3, [r7, #3]
 8001244:	015a      	lsls	r2, r3, #5
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	4413      	add	r3, r2
 800124a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800124e:	461a      	mov	r2, r3
 8001250:	2301      	movs	r3, #1
 8001252:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001254:	78fa      	ldrb	r2, [r7, #3]
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	4613      	mov	r3, r2
 800125a:	011b      	lsls	r3, r3, #4
 800125c:	1a9b      	subs	r3, r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	440b      	add	r3, r1
 8001262:	3326      	adds	r3, #38	; 0x26
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00a      	beq.n	8001280 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800126a:	78fa      	ldrb	r2, [r7, #3]
 800126c:	6879      	ldr	r1, [r7, #4]
 800126e:	4613      	mov	r3, r2
 8001270:	011b      	lsls	r3, r3, #4
 8001272:	1a9b      	subs	r3, r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	440b      	add	r3, r1
 8001278:	3326      	adds	r3, #38	; 0x26
 800127a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800127c:	2b02      	cmp	r3, #2
 800127e:	d110      	bne.n	80012a2 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	78fa      	ldrb	r2, [r7, #3]
 8001286:	4611      	mov	r1, r2
 8001288:	4618      	mov	r0, r3
 800128a:	f002 fb93 	bl	80039b4 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800128e:	78fb      	ldrb	r3, [r7, #3]
 8001290:	015a      	lsls	r2, r3, #5
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	4413      	add	r3, r2
 8001296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800129a:	461a      	mov	r2, r3
 800129c:	2310      	movs	r3, #16
 800129e:	6093      	str	r3, [r2, #8]
 80012a0:	e03d      	b.n	800131e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80012a2:	78fa      	ldrb	r2, [r7, #3]
 80012a4:	6879      	ldr	r1, [r7, #4]
 80012a6:	4613      	mov	r3, r2
 80012a8:	011b      	lsls	r3, r3, #4
 80012aa:	1a9b      	subs	r3, r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	440b      	add	r3, r1
 80012b0:	3326      	adds	r3, #38	; 0x26
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	d00a      	beq.n	80012ce <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80012b8:	78fa      	ldrb	r2, [r7, #3]
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	4613      	mov	r3, r2
 80012be:	011b      	lsls	r3, r3, #4
 80012c0:	1a9b      	subs	r3, r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	440b      	add	r3, r1
 80012c6:	3326      	adds	r3, #38	; 0x26
 80012c8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d127      	bne.n	800131e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80012ce:	78fb      	ldrb	r3, [r7, #3]
 80012d0:	015a      	lsls	r2, r3, #5
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	4413      	add	r3, r2
 80012d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	78fa      	ldrb	r2, [r7, #3]
 80012de:	0151      	lsls	r1, r2, #5
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	440a      	add	r2, r1
 80012e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80012e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80012ec:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80012ee:	78fa      	ldrb	r2, [r7, #3]
 80012f0:	6879      	ldr	r1, [r7, #4]
 80012f2:	4613      	mov	r3, r2
 80012f4:	011b      	lsls	r3, r3, #4
 80012f6:	1a9b      	subs	r3, r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	440b      	add	r3, r1
 80012fc:	334c      	adds	r3, #76	; 0x4c
 80012fe:	2201      	movs	r2, #1
 8001300:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001302:	78fa      	ldrb	r2, [r7, #3]
 8001304:	6879      	ldr	r1, [r7, #4]
 8001306:	4613      	mov	r3, r2
 8001308:	011b      	lsls	r3, r3, #4
 800130a:	1a9b      	subs	r3, r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	440b      	add	r3, r1
 8001310:	334c      	adds	r3, #76	; 0x4c
 8001312:	781a      	ldrb	r2, [r3, #0]
 8001314:	78fb      	ldrb	r3, [r7, #3]
 8001316:	4619      	mov	r1, r3
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f004 f828 	bl	800536e <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	799b      	ldrb	r3, [r3, #6]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d13b      	bne.n	800139e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8001326:	78fa      	ldrb	r2, [r7, #3]
 8001328:	6879      	ldr	r1, [r7, #4]
 800132a:	4613      	mov	r3, r2
 800132c:	011b      	lsls	r3, r3, #4
 800132e:	1a9b      	subs	r3, r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	440b      	add	r3, r1
 8001334:	3338      	adds	r3, #56	; 0x38
 8001336:	6819      	ldr	r1, [r3, #0]
 8001338:	78fa      	ldrb	r2, [r7, #3]
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	4613      	mov	r3, r2
 800133e:	011b      	lsls	r3, r3, #4
 8001340:	1a9b      	subs	r3, r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4403      	add	r3, r0
 8001346:	3328      	adds	r3, #40	; 0x28
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	440b      	add	r3, r1
 800134c:	1e59      	subs	r1, r3, #1
 800134e:	78fa      	ldrb	r2, [r7, #3]
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	4613      	mov	r3, r2
 8001354:	011b      	lsls	r3, r3, #4
 8001356:	1a9b      	subs	r3, r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4403      	add	r3, r0
 800135c:	3328      	adds	r3, #40	; 0x28
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	fbb1 f3f3 	udiv	r3, r1, r3
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b00      	cmp	r3, #0
 800136a:	f000 8470 	beq.w	8001c4e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800136e:	78fa      	ldrb	r2, [r7, #3]
 8001370:	6879      	ldr	r1, [r7, #4]
 8001372:	4613      	mov	r3, r2
 8001374:	011b      	lsls	r3, r3, #4
 8001376:	1a9b      	subs	r3, r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	440b      	add	r3, r1
 800137c:	333c      	adds	r3, #60	; 0x3c
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	78fa      	ldrb	r2, [r7, #3]
 8001382:	f083 0301 	eor.w	r3, r3, #1
 8001386:	b2d8      	uxtb	r0, r3
 8001388:	6879      	ldr	r1, [r7, #4]
 800138a:	4613      	mov	r3, r2
 800138c:	011b      	lsls	r3, r3, #4
 800138e:	1a9b      	subs	r3, r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	440b      	add	r3, r1
 8001394:	333c      	adds	r3, #60	; 0x3c
 8001396:	4602      	mov	r2, r0
 8001398:	701a      	strb	r2, [r3, #0]
 800139a:	f000 bc58 	b.w	8001c4e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800139e:	78fa      	ldrb	r2, [r7, #3]
 80013a0:	6879      	ldr	r1, [r7, #4]
 80013a2:	4613      	mov	r3, r2
 80013a4:	011b      	lsls	r3, r3, #4
 80013a6:	1a9b      	subs	r3, r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	440b      	add	r3, r1
 80013ac:	333c      	adds	r3, #60	; 0x3c
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	78fa      	ldrb	r2, [r7, #3]
 80013b2:	f083 0301 	eor.w	r3, r3, #1
 80013b6:	b2d8      	uxtb	r0, r3
 80013b8:	6879      	ldr	r1, [r7, #4]
 80013ba:	4613      	mov	r3, r2
 80013bc:	011b      	lsls	r3, r3, #4
 80013be:	1a9b      	subs	r3, r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	440b      	add	r3, r1
 80013c4:	333c      	adds	r3, #60	; 0x3c
 80013c6:	4602      	mov	r2, r0
 80013c8:	701a      	strb	r2, [r3, #0]
 80013ca:	f000 bc40 	b.w	8001c4e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	78fa      	ldrb	r2, [r7, #3]
 80013d4:	4611      	mov	r1, r2
 80013d6:	4618      	mov	r0, r3
 80013d8:	f002 fa6f 	bl	80038ba <USB_ReadChInterrupts>
 80013dc:	4603      	mov	r3, r0
 80013de:	f003 0320 	and.w	r3, r3, #32
 80013e2:	2b20      	cmp	r3, #32
 80013e4:	d131      	bne.n	800144a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80013e6:	78fb      	ldrb	r3, [r7, #3]
 80013e8:	015a      	lsls	r2, r3, #5
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	4413      	add	r3, r2
 80013ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013f2:	461a      	mov	r2, r3
 80013f4:	2320      	movs	r3, #32
 80013f6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80013f8:	78fa      	ldrb	r2, [r7, #3]
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	4613      	mov	r3, r2
 80013fe:	011b      	lsls	r3, r3, #4
 8001400:	1a9b      	subs	r3, r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	440b      	add	r3, r1
 8001406:	331a      	adds	r3, #26
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b01      	cmp	r3, #1
 800140c:	f040 841f 	bne.w	8001c4e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8001410:	78fa      	ldrb	r2, [r7, #3]
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	4613      	mov	r3, r2
 8001416:	011b      	lsls	r3, r3, #4
 8001418:	1a9b      	subs	r3, r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	440b      	add	r3, r1
 800141e:	331b      	adds	r3, #27
 8001420:	2201      	movs	r2, #1
 8001422:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8001424:	78fa      	ldrb	r2, [r7, #3]
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	4613      	mov	r3, r2
 800142a:	011b      	lsls	r3, r3, #4
 800142c:	1a9b      	subs	r3, r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	440b      	add	r3, r1
 8001432:	334d      	adds	r3, #77	; 0x4d
 8001434:	2203      	movs	r2, #3
 8001436:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	78fa      	ldrb	r2, [r7, #3]
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f002 fab7 	bl	80039b4 <USB_HC_Halt>
 8001446:	f000 bc02 	b.w	8001c4e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	78fa      	ldrb	r2, [r7, #3]
 8001450:	4611      	mov	r1, r2
 8001452:	4618      	mov	r0, r3
 8001454:	f002 fa31 	bl	80038ba <USB_ReadChInterrupts>
 8001458:	4603      	mov	r3, r0
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b02      	cmp	r3, #2
 8001460:	f040 8305 	bne.w	8001a6e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001464:	78fb      	ldrb	r3, [r7, #3]
 8001466:	015a      	lsls	r2, r3, #5
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	4413      	add	r3, r2
 800146c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001470:	461a      	mov	r2, r3
 8001472:	2302      	movs	r3, #2
 8001474:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8001476:	78fa      	ldrb	r2, [r7, #3]
 8001478:	6879      	ldr	r1, [r7, #4]
 800147a:	4613      	mov	r3, r2
 800147c:	011b      	lsls	r3, r3, #4
 800147e:	1a9b      	subs	r3, r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	440b      	add	r3, r1
 8001484:	334d      	adds	r3, #77	; 0x4d
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d114      	bne.n	80014b6 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800148c:	78fa      	ldrb	r2, [r7, #3]
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	4613      	mov	r3, r2
 8001492:	011b      	lsls	r3, r3, #4
 8001494:	1a9b      	subs	r3, r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	440b      	add	r3, r1
 800149a:	334d      	adds	r3, #77	; 0x4d
 800149c:	2202      	movs	r2, #2
 800149e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80014a0:	78fa      	ldrb	r2, [r7, #3]
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	011b      	lsls	r3, r3, #4
 80014a8:	1a9b      	subs	r3, r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	440b      	add	r3, r1
 80014ae:	334c      	adds	r3, #76	; 0x4c
 80014b0:	2201      	movs	r2, #1
 80014b2:	701a      	strb	r2, [r3, #0]
 80014b4:	e2cc      	b.n	8001a50 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80014b6:	78fa      	ldrb	r2, [r7, #3]
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	011b      	lsls	r3, r3, #4
 80014be:	1a9b      	subs	r3, r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	440b      	add	r3, r1
 80014c4:	334d      	adds	r3, #77	; 0x4d
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b06      	cmp	r3, #6
 80014ca:	d114      	bne.n	80014f6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80014cc:	78fa      	ldrb	r2, [r7, #3]
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	4613      	mov	r3, r2
 80014d2:	011b      	lsls	r3, r3, #4
 80014d4:	1a9b      	subs	r3, r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	440b      	add	r3, r1
 80014da:	334d      	adds	r3, #77	; 0x4d
 80014dc:	2202      	movs	r2, #2
 80014de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80014e0:	78fa      	ldrb	r2, [r7, #3]
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	011b      	lsls	r3, r3, #4
 80014e8:	1a9b      	subs	r3, r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	440b      	add	r3, r1
 80014ee:	334c      	adds	r3, #76	; 0x4c
 80014f0:	2205      	movs	r2, #5
 80014f2:	701a      	strb	r2, [r3, #0]
 80014f4:	e2ac      	b.n	8001a50 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80014f6:	78fa      	ldrb	r2, [r7, #3]
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	4613      	mov	r3, r2
 80014fc:	011b      	lsls	r3, r3, #4
 80014fe:	1a9b      	subs	r3, r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	440b      	add	r3, r1
 8001504:	334d      	adds	r3, #77	; 0x4d
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b07      	cmp	r3, #7
 800150a:	d00b      	beq.n	8001524 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800150c:	78fa      	ldrb	r2, [r7, #3]
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	4613      	mov	r3, r2
 8001512:	011b      	lsls	r3, r3, #4
 8001514:	1a9b      	subs	r3, r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	440b      	add	r3, r1
 800151a:	334d      	adds	r3, #77	; 0x4d
 800151c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800151e:	2b09      	cmp	r3, #9
 8001520:	f040 80a6 	bne.w	8001670 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001524:	78fa      	ldrb	r2, [r7, #3]
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	4613      	mov	r3, r2
 800152a:	011b      	lsls	r3, r3, #4
 800152c:	1a9b      	subs	r3, r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	440b      	add	r3, r1
 8001532:	334d      	adds	r3, #77	; 0x4d
 8001534:	2202      	movs	r2, #2
 8001536:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001538:	78fa      	ldrb	r2, [r7, #3]
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	4613      	mov	r3, r2
 800153e:	011b      	lsls	r3, r3, #4
 8001540:	1a9b      	subs	r3, r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	440b      	add	r3, r1
 8001546:	3344      	adds	r3, #68	; 0x44
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	1c59      	adds	r1, r3, #1
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	4613      	mov	r3, r2
 8001550:	011b      	lsls	r3, r3, #4
 8001552:	1a9b      	subs	r3, r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4403      	add	r3, r0
 8001558:	3344      	adds	r3, #68	; 0x44
 800155a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800155c:	78fa      	ldrb	r2, [r7, #3]
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	4613      	mov	r3, r2
 8001562:	011b      	lsls	r3, r3, #4
 8001564:	1a9b      	subs	r3, r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	440b      	add	r3, r1
 800156a:	3344      	adds	r3, #68	; 0x44
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b02      	cmp	r3, #2
 8001570:	d943      	bls.n	80015fa <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8001572:	78fa      	ldrb	r2, [r7, #3]
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	4613      	mov	r3, r2
 8001578:	011b      	lsls	r3, r3, #4
 800157a:	1a9b      	subs	r3, r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	440b      	add	r3, r1
 8001580:	3344      	adds	r3, #68	; 0x44
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8001586:	78fa      	ldrb	r2, [r7, #3]
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	4613      	mov	r3, r2
 800158c:	011b      	lsls	r3, r3, #4
 800158e:	1a9b      	subs	r3, r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	440b      	add	r3, r1
 8001594:	331a      	adds	r3, #26
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d123      	bne.n	80015e4 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800159c:	78fa      	ldrb	r2, [r7, #3]
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	4613      	mov	r3, r2
 80015a2:	011b      	lsls	r3, r3, #4
 80015a4:	1a9b      	subs	r3, r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	440b      	add	r3, r1
 80015aa:	331b      	adds	r3, #27
 80015ac:	2200      	movs	r2, #0
 80015ae:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80015b0:	78fa      	ldrb	r2, [r7, #3]
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	4613      	mov	r3, r2
 80015b6:	011b      	lsls	r3, r3, #4
 80015b8:	1a9b      	subs	r3, r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	440b      	add	r3, r1
 80015be:	331c      	adds	r3, #28
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80015c4:	78fb      	ldrb	r3, [r7, #3]
 80015c6:	015a      	lsls	r2, r3, #5
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	4413      	add	r3, r2
 80015cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	78fa      	ldrb	r2, [r7, #3]
 80015d4:	0151      	lsls	r1, r2, #5
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	440a      	add	r2, r1
 80015da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80015de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015e2:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80015e4:	78fa      	ldrb	r2, [r7, #3]
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	4613      	mov	r3, r2
 80015ea:	011b      	lsls	r3, r3, #4
 80015ec:	1a9b      	subs	r3, r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	334c      	adds	r3, #76	; 0x4c
 80015f4:	2204      	movs	r2, #4
 80015f6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80015f8:	e229      	b.n	8001a4e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80015fa:	78fa      	ldrb	r2, [r7, #3]
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	4613      	mov	r3, r2
 8001600:	011b      	lsls	r3, r3, #4
 8001602:	1a9b      	subs	r3, r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	440b      	add	r3, r1
 8001608:	334c      	adds	r3, #76	; 0x4c
 800160a:	2202      	movs	r2, #2
 800160c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800160e:	78fa      	ldrb	r2, [r7, #3]
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	4613      	mov	r3, r2
 8001614:	011b      	lsls	r3, r3, #4
 8001616:	1a9b      	subs	r3, r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	440b      	add	r3, r1
 800161c:	3326      	adds	r3, #38	; 0x26
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00b      	beq.n	800163c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001624:	78fa      	ldrb	r2, [r7, #3]
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	4613      	mov	r3, r2
 800162a:	011b      	lsls	r3, r3, #4
 800162c:	1a9b      	subs	r3, r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	440b      	add	r3, r1
 8001632:	3326      	adds	r3, #38	; 0x26
 8001634:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001636:	2b02      	cmp	r3, #2
 8001638:	f040 8209 	bne.w	8001a4e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800163c:	78fb      	ldrb	r3, [r7, #3]
 800163e:	015a      	lsls	r2, r3, #5
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	4413      	add	r3, r2
 8001644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001652:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800165a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800165c:	78fb      	ldrb	r3, [r7, #3]
 800165e:	015a      	lsls	r2, r3, #5
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	4413      	add	r3, r2
 8001664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001668:	461a      	mov	r2, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800166e:	e1ee      	b.n	8001a4e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8001670:	78fa      	ldrb	r2, [r7, #3]
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	4613      	mov	r3, r2
 8001676:	011b      	lsls	r3, r3, #4
 8001678:	1a9b      	subs	r3, r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	440b      	add	r3, r1
 800167e:	334d      	adds	r3, #77	; 0x4d
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b05      	cmp	r3, #5
 8001684:	f040 80c8 	bne.w	8001818 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001688:	78fa      	ldrb	r2, [r7, #3]
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	4613      	mov	r3, r2
 800168e:	011b      	lsls	r3, r3, #4
 8001690:	1a9b      	subs	r3, r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	440b      	add	r3, r1
 8001696:	334d      	adds	r3, #77	; 0x4d
 8001698:	2202      	movs	r2, #2
 800169a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800169c:	78fa      	ldrb	r2, [r7, #3]
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	4613      	mov	r3, r2
 80016a2:	011b      	lsls	r3, r3, #4
 80016a4:	1a9b      	subs	r3, r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	440b      	add	r3, r1
 80016aa:	331b      	adds	r3, #27
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	f040 81ce 	bne.w	8001a50 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80016b4:	78fa      	ldrb	r2, [r7, #3]
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	4613      	mov	r3, r2
 80016ba:	011b      	lsls	r3, r3, #4
 80016bc:	1a9b      	subs	r3, r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	440b      	add	r3, r1
 80016c2:	3326      	adds	r3, #38	; 0x26
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b03      	cmp	r3, #3
 80016c8:	d16b      	bne.n	80017a2 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80016ca:	78fa      	ldrb	r2, [r7, #3]
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	4613      	mov	r3, r2
 80016d0:	011b      	lsls	r3, r3, #4
 80016d2:	1a9b      	subs	r3, r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	440b      	add	r3, r1
 80016d8:	3348      	adds	r3, #72	; 0x48
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	1c59      	adds	r1, r3, #1
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	4613      	mov	r3, r2
 80016e2:	011b      	lsls	r3, r3, #4
 80016e4:	1a9b      	subs	r3, r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4403      	add	r3, r0
 80016ea:	3348      	adds	r3, #72	; 0x48
 80016ec:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80016ee:	78fa      	ldrb	r2, [r7, #3]
 80016f0:	6879      	ldr	r1, [r7, #4]
 80016f2:	4613      	mov	r3, r2
 80016f4:	011b      	lsls	r3, r3, #4
 80016f6:	1a9b      	subs	r3, r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	440b      	add	r3, r1
 80016fc:	3348      	adds	r3, #72	; 0x48
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b02      	cmp	r3, #2
 8001702:	d943      	bls.n	800178c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8001704:	78fa      	ldrb	r2, [r7, #3]
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	4613      	mov	r3, r2
 800170a:	011b      	lsls	r3, r3, #4
 800170c:	1a9b      	subs	r3, r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	3348      	adds	r3, #72	; 0x48
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8001718:	78fa      	ldrb	r2, [r7, #3]
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	4613      	mov	r3, r2
 800171e:	011b      	lsls	r3, r3, #4
 8001720:	1a9b      	subs	r3, r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	440b      	add	r3, r1
 8001726:	331b      	adds	r3, #27
 8001728:	2200      	movs	r2, #0
 800172a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800172c:	78fa      	ldrb	r2, [r7, #3]
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	4613      	mov	r3, r2
 8001732:	011b      	lsls	r3, r3, #4
 8001734:	1a9b      	subs	r3, r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	440b      	add	r3, r1
 800173a:	3344      	adds	r3, #68	; 0x44
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2b02      	cmp	r3, #2
 8001740:	d809      	bhi.n	8001756 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8001742:	78fa      	ldrb	r2, [r7, #3]
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	4613      	mov	r3, r2
 8001748:	011b      	lsls	r3, r3, #4
 800174a:	1a9b      	subs	r3, r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	440b      	add	r3, r1
 8001750:	331c      	adds	r3, #28
 8001752:	2201      	movs	r2, #1
 8001754:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001756:	78fb      	ldrb	r3, [r7, #3]
 8001758:	015a      	lsls	r2, r3, #5
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	4413      	add	r3, r2
 800175e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	78fa      	ldrb	r2, [r7, #3]
 8001766:	0151      	lsls	r1, r2, #5
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	440a      	add	r2, r1
 800176c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001770:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001774:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8001776:	78fa      	ldrb	r2, [r7, #3]
 8001778:	6879      	ldr	r1, [r7, #4]
 800177a:	4613      	mov	r3, r2
 800177c:	011b      	lsls	r3, r3, #4
 800177e:	1a9b      	subs	r3, r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	440b      	add	r3, r1
 8001784:	334c      	adds	r3, #76	; 0x4c
 8001786:	2204      	movs	r2, #4
 8001788:	701a      	strb	r2, [r3, #0]
 800178a:	e014      	b.n	80017b6 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800178c:	78fa      	ldrb	r2, [r7, #3]
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	4613      	mov	r3, r2
 8001792:	011b      	lsls	r3, r3, #4
 8001794:	1a9b      	subs	r3, r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	440b      	add	r3, r1
 800179a:	334c      	adds	r3, #76	; 0x4c
 800179c:	2202      	movs	r2, #2
 800179e:	701a      	strb	r2, [r3, #0]
 80017a0:	e009      	b.n	80017b6 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80017a2:	78fa      	ldrb	r2, [r7, #3]
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	4613      	mov	r3, r2
 80017a8:	011b      	lsls	r3, r3, #4
 80017aa:	1a9b      	subs	r3, r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	440b      	add	r3, r1
 80017b0:	334c      	adds	r3, #76	; 0x4c
 80017b2:	2202      	movs	r2, #2
 80017b4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80017b6:	78fa      	ldrb	r2, [r7, #3]
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	4613      	mov	r3, r2
 80017bc:	011b      	lsls	r3, r3, #4
 80017be:	1a9b      	subs	r3, r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	440b      	add	r3, r1
 80017c4:	3326      	adds	r3, #38	; 0x26
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00b      	beq.n	80017e4 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80017cc:	78fa      	ldrb	r2, [r7, #3]
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	4613      	mov	r3, r2
 80017d2:	011b      	lsls	r3, r3, #4
 80017d4:	1a9b      	subs	r3, r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	440b      	add	r3, r1
 80017da:	3326      	adds	r3, #38	; 0x26
 80017dc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80017de:	2b02      	cmp	r3, #2
 80017e0:	f040 8136 	bne.w	8001a50 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80017e4:	78fb      	ldrb	r3, [r7, #3]
 80017e6:	015a      	lsls	r2, r3, #5
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	4413      	add	r3, r2
 80017ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80017fa:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001802:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001804:	78fb      	ldrb	r3, [r7, #3]
 8001806:	015a      	lsls	r2, r3, #5
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	4413      	add	r3, r2
 800180c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001810:	461a      	mov	r2, r3
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	e11b      	b.n	8001a50 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8001818:	78fa      	ldrb	r2, [r7, #3]
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	4613      	mov	r3, r2
 800181e:	011b      	lsls	r3, r3, #4
 8001820:	1a9b      	subs	r3, r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	440b      	add	r3, r1
 8001826:	334d      	adds	r3, #77	; 0x4d
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b03      	cmp	r3, #3
 800182c:	f040 8081 	bne.w	8001932 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001830:	78fa      	ldrb	r2, [r7, #3]
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	4613      	mov	r3, r2
 8001836:	011b      	lsls	r3, r3, #4
 8001838:	1a9b      	subs	r3, r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	440b      	add	r3, r1
 800183e:	334d      	adds	r3, #77	; 0x4d
 8001840:	2202      	movs	r2, #2
 8001842:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001844:	78fa      	ldrb	r2, [r7, #3]
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	4613      	mov	r3, r2
 800184a:	011b      	lsls	r3, r3, #4
 800184c:	1a9b      	subs	r3, r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	440b      	add	r3, r1
 8001852:	331b      	adds	r3, #27
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b01      	cmp	r3, #1
 8001858:	f040 80fa 	bne.w	8001a50 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800185c:	78fa      	ldrb	r2, [r7, #3]
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	4613      	mov	r3, r2
 8001862:	011b      	lsls	r3, r3, #4
 8001864:	1a9b      	subs	r3, r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	334c      	adds	r3, #76	; 0x4c
 800186c:	2202      	movs	r2, #2
 800186e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8001870:	78fb      	ldrb	r3, [r7, #3]
 8001872:	015a      	lsls	r2, r3, #5
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	4413      	add	r3, r2
 8001878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	78fa      	ldrb	r2, [r7, #3]
 8001880:	0151      	lsls	r1, r2, #5
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	440a      	add	r2, r1
 8001886:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800188a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800188e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8001890:	78fb      	ldrb	r3, [r7, #3]
 8001892:	015a      	lsls	r2, r3, #5
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	4413      	add	r3, r2
 8001898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	78fa      	ldrb	r2, [r7, #3]
 80018a0:	0151      	lsls	r1, r2, #5
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	440a      	add	r2, r1
 80018a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80018aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018ae:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80018b0:	78fb      	ldrb	r3, [r7, #3]
 80018b2:	015a      	lsls	r2, r3, #5
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	4413      	add	r3, r2
 80018b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	78fa      	ldrb	r2, [r7, #3]
 80018c0:	0151      	lsls	r1, r2, #5
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	440a      	add	r2, r1
 80018c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80018ca:	f023 0320 	bic.w	r3, r3, #32
 80018ce:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80018d0:	78fa      	ldrb	r2, [r7, #3]
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	011b      	lsls	r3, r3, #4
 80018d8:	1a9b      	subs	r3, r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	3326      	adds	r3, #38	; 0x26
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00b      	beq.n	80018fe <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80018e6:	78fa      	ldrb	r2, [r7, #3]
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	011b      	lsls	r3, r3, #4
 80018ee:	1a9b      	subs	r3, r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	440b      	add	r3, r1
 80018f4:	3326      	adds	r3, #38	; 0x26
 80018f6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	f040 80a9 	bne.w	8001a50 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80018fe:	78fb      	ldrb	r3, [r7, #3]
 8001900:	015a      	lsls	r2, r3, #5
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	4413      	add	r3, r2
 8001906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001914:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800191c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800191e:	78fb      	ldrb	r3, [r7, #3]
 8001920:	015a      	lsls	r2, r3, #5
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	4413      	add	r3, r2
 8001926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800192a:	461a      	mov	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	e08e      	b.n	8001a50 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8001932:	78fa      	ldrb	r2, [r7, #3]
 8001934:	6879      	ldr	r1, [r7, #4]
 8001936:	4613      	mov	r3, r2
 8001938:	011b      	lsls	r3, r3, #4
 800193a:	1a9b      	subs	r3, r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	440b      	add	r3, r1
 8001940:	334d      	adds	r3, #77	; 0x4d
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b04      	cmp	r3, #4
 8001946:	d143      	bne.n	80019d0 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001948:	78fa      	ldrb	r2, [r7, #3]
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	011b      	lsls	r3, r3, #4
 8001950:	1a9b      	subs	r3, r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	334d      	adds	r3, #77	; 0x4d
 8001958:	2202      	movs	r2, #2
 800195a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800195c:	78fa      	ldrb	r2, [r7, #3]
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	4613      	mov	r3, r2
 8001962:	011b      	lsls	r3, r3, #4
 8001964:	1a9b      	subs	r3, r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	440b      	add	r3, r1
 800196a:	334c      	adds	r3, #76	; 0x4c
 800196c:	2202      	movs	r2, #2
 800196e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001970:	78fa      	ldrb	r2, [r7, #3]
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	4613      	mov	r3, r2
 8001976:	011b      	lsls	r3, r3, #4
 8001978:	1a9b      	subs	r3, r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	440b      	add	r3, r1
 800197e:	3326      	adds	r3, #38	; 0x26
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00a      	beq.n	800199c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001986:	78fa      	ldrb	r2, [r7, #3]
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	011b      	lsls	r3, r3, #4
 800198e:	1a9b      	subs	r3, r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	440b      	add	r3, r1
 8001994:	3326      	adds	r3, #38	; 0x26
 8001996:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001998:	2b02      	cmp	r3, #2
 800199a:	d159      	bne.n	8001a50 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800199c:	78fb      	ldrb	r3, [r7, #3]
 800199e:	015a      	lsls	r2, r3, #5
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	4413      	add	r3, r2
 80019a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80019b2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80019ba:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80019bc:	78fb      	ldrb	r3, [r7, #3]
 80019be:	015a      	lsls	r2, r3, #5
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	4413      	add	r3, r2
 80019c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019c8:	461a      	mov	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	e03f      	b.n	8001a50 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80019d0:	78fa      	ldrb	r2, [r7, #3]
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	011b      	lsls	r3, r3, #4
 80019d8:	1a9b      	subs	r3, r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	334d      	adds	r3, #77	; 0x4d
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b08      	cmp	r3, #8
 80019e4:	d126      	bne.n	8001a34 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80019e6:	78fa      	ldrb	r2, [r7, #3]
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	4613      	mov	r3, r2
 80019ec:	011b      	lsls	r3, r3, #4
 80019ee:	1a9b      	subs	r3, r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	440b      	add	r3, r1
 80019f4:	334d      	adds	r3, #77	; 0x4d
 80019f6:	2202      	movs	r2, #2
 80019f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80019fa:	78fa      	ldrb	r2, [r7, #3]
 80019fc:	6879      	ldr	r1, [r7, #4]
 80019fe:	4613      	mov	r3, r2
 8001a00:	011b      	lsls	r3, r3, #4
 8001a02:	1a9b      	subs	r3, r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	440b      	add	r3, r1
 8001a08:	3344      	adds	r3, #68	; 0x44
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	1c59      	adds	r1, r3, #1
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	4613      	mov	r3, r2
 8001a12:	011b      	lsls	r3, r3, #4
 8001a14:	1a9b      	subs	r3, r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4403      	add	r3, r0
 8001a1a:	3344      	adds	r3, #68	; 0x44
 8001a1c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8001a1e:	78fa      	ldrb	r2, [r7, #3]
 8001a20:	6879      	ldr	r1, [r7, #4]
 8001a22:	4613      	mov	r3, r2
 8001a24:	011b      	lsls	r3, r3, #4
 8001a26:	1a9b      	subs	r3, r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	440b      	add	r3, r1
 8001a2c:	334c      	adds	r3, #76	; 0x4c
 8001a2e:	2204      	movs	r2, #4
 8001a30:	701a      	strb	r2, [r3, #0]
 8001a32:	e00d      	b.n	8001a50 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8001a34:	78fa      	ldrb	r2, [r7, #3]
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	011b      	lsls	r3, r3, #4
 8001a3c:	1a9b      	subs	r3, r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	440b      	add	r3, r1
 8001a42:	334d      	adds	r3, #77	; 0x4d
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	f000 8100 	beq.w	8001c4c <HCD_HC_IN_IRQHandler+0xcca>
 8001a4c:	e000      	b.n	8001a50 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001a4e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001a50:	78fa      	ldrb	r2, [r7, #3]
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	4613      	mov	r3, r2
 8001a56:	011b      	lsls	r3, r3, #4
 8001a58:	1a9b      	subs	r3, r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	334c      	adds	r3, #76	; 0x4c
 8001a60:	781a      	ldrb	r2, [r3, #0]
 8001a62:	78fb      	ldrb	r3, [r7, #3]
 8001a64:	4619      	mov	r1, r3
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f003 fc81 	bl	800536e <HAL_HCD_HC_NotifyURBChange_Callback>
 8001a6c:	e0ef      	b.n	8001c4e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	78fa      	ldrb	r2, [r7, #3]
 8001a74:	4611      	mov	r1, r2
 8001a76:	4618      	mov	r0, r3
 8001a78:	f001 ff1f 	bl	80038ba <USB_ReadChInterrupts>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a82:	2b40      	cmp	r3, #64	; 0x40
 8001a84:	d12f      	bne.n	8001ae6 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8001a86:	78fb      	ldrb	r3, [r7, #3]
 8001a88:	015a      	lsls	r2, r3, #5
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a92:	461a      	mov	r2, r3
 8001a94:	2340      	movs	r3, #64	; 0x40
 8001a96:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8001a98:	78fa      	ldrb	r2, [r7, #3]
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	011b      	lsls	r3, r3, #4
 8001aa0:	1a9b      	subs	r3, r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	334d      	adds	r3, #77	; 0x4d
 8001aa8:	2205      	movs	r2, #5
 8001aaa:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8001aac:	78fa      	ldrb	r2, [r7, #3]
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	011b      	lsls	r3, r3, #4
 8001ab4:	1a9b      	subs	r3, r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	440b      	add	r3, r1
 8001aba:	331a      	adds	r3, #26
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d109      	bne.n	8001ad6 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8001ac2:	78fa      	ldrb	r2, [r7, #3]
 8001ac4:	6879      	ldr	r1, [r7, #4]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	011b      	lsls	r3, r3, #4
 8001aca:	1a9b      	subs	r3, r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	440b      	add	r3, r1
 8001ad0:	3344      	adds	r3, #68	; 0x44
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	78fa      	ldrb	r2, [r7, #3]
 8001adc:	4611      	mov	r1, r2
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f001 ff68 	bl	80039b4 <USB_HC_Halt>
 8001ae4:	e0b3      	b.n	8001c4e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	78fa      	ldrb	r2, [r7, #3]
 8001aec:	4611      	mov	r1, r2
 8001aee:	4618      	mov	r0, r3
 8001af0:	f001 fee3 	bl	80038ba <USB_ReadChInterrupts>
 8001af4:	4603      	mov	r3, r0
 8001af6:	f003 0310 	and.w	r3, r3, #16
 8001afa:	2b10      	cmp	r3, #16
 8001afc:	f040 80a7 	bne.w	8001c4e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001b00:	78fa      	ldrb	r2, [r7, #3]
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	4613      	mov	r3, r2
 8001b06:	011b      	lsls	r3, r3, #4
 8001b08:	1a9b      	subs	r3, r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	3326      	adds	r3, #38	; 0x26
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	d11b      	bne.n	8001b4e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8001b16:	78fa      	ldrb	r2, [r7, #3]
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	011b      	lsls	r3, r3, #4
 8001b1e:	1a9b      	subs	r3, r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	440b      	add	r3, r1
 8001b24:	3344      	adds	r3, #68	; 0x44
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8001b2a:	78fa      	ldrb	r2, [r7, #3]
 8001b2c:	6879      	ldr	r1, [r7, #4]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	011b      	lsls	r3, r3, #4
 8001b32:	1a9b      	subs	r3, r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	440b      	add	r3, r1
 8001b38:	334d      	adds	r3, #77	; 0x4d
 8001b3a:	2204      	movs	r2, #4
 8001b3c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	78fa      	ldrb	r2, [r7, #3]
 8001b44:	4611      	mov	r1, r2
 8001b46:	4618      	mov	r0, r3
 8001b48:	f001 ff34 	bl	80039b4 <USB_HC_Halt>
 8001b4c:	e03f      	b.n	8001bce <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001b4e:	78fa      	ldrb	r2, [r7, #3]
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	4613      	mov	r3, r2
 8001b54:	011b      	lsls	r3, r3, #4
 8001b56:	1a9b      	subs	r3, r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	440b      	add	r3, r1
 8001b5c:	3326      	adds	r3, #38	; 0x26
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d00a      	beq.n	8001b7a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001b64:	78fa      	ldrb	r2, [r7, #3]
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	011b      	lsls	r3, r3, #4
 8001b6c:	1a9b      	subs	r3, r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	440b      	add	r3, r1
 8001b72:	3326      	adds	r3, #38	; 0x26
 8001b74:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d129      	bne.n	8001bce <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8001b7a:	78fa      	ldrb	r2, [r7, #3]
 8001b7c:	6879      	ldr	r1, [r7, #4]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	011b      	lsls	r3, r3, #4
 8001b82:	1a9b      	subs	r3, r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	440b      	add	r3, r1
 8001b88:	3344      	adds	r3, #68	; 0x44
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	799b      	ldrb	r3, [r3, #6]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00a      	beq.n	8001bac <HCD_HC_IN_IRQHandler+0xc2a>
 8001b96:	78fa      	ldrb	r2, [r7, #3]
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	011b      	lsls	r3, r3, #4
 8001b9e:	1a9b      	subs	r3, r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	331b      	adds	r3, #27
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d110      	bne.n	8001bce <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8001bac:	78fa      	ldrb	r2, [r7, #3]
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	011b      	lsls	r3, r3, #4
 8001bb4:	1a9b      	subs	r3, r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	440b      	add	r3, r1
 8001bba:	334d      	adds	r3, #77	; 0x4d
 8001bbc:	2204      	movs	r2, #4
 8001bbe:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	78fa      	ldrb	r2, [r7, #3]
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f001 fef3 	bl	80039b4 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001bce:	78fa      	ldrb	r2, [r7, #3]
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	011b      	lsls	r3, r3, #4
 8001bd6:	1a9b      	subs	r3, r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	440b      	add	r3, r1
 8001bdc:	331b      	adds	r3, #27
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d129      	bne.n	8001c38 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001be4:	78fa      	ldrb	r2, [r7, #3]
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	4613      	mov	r3, r2
 8001bea:	011b      	lsls	r3, r3, #4
 8001bec:	1a9b      	subs	r3, r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	331b      	adds	r3, #27
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001bf8:	78fb      	ldrb	r3, [r7, #3]
 8001bfa:	015a      	lsls	r2, r3, #5
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	4413      	add	r3, r2
 8001c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	78fa      	ldrb	r2, [r7, #3]
 8001c08:	0151      	lsls	r1, r2, #5
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	440a      	add	r2, r1
 8001c0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c16:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8001c18:	78fb      	ldrb	r3, [r7, #3]
 8001c1a:	015a      	lsls	r2, r3, #5
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4413      	add	r3, r2
 8001c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	78fa      	ldrb	r2, [r7, #3]
 8001c28:	0151      	lsls	r1, r2, #5
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	440a      	add	r2, r1
 8001c2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c32:	f043 0320 	orr.w	r3, r3, #32
 8001c36:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001c38:	78fb      	ldrb	r3, [r7, #3]
 8001c3a:	015a      	lsls	r2, r3, #5
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	4413      	add	r3, r2
 8001c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c44:	461a      	mov	r2, r3
 8001c46:	2310      	movs	r3, #16
 8001c48:	6093      	str	r3, [r2, #8]
 8001c4a:	e000      	b.n	8001c4e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8001c4c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	78fa      	ldrb	r2, [r7, #3]
 8001c70:	4611      	mov	r1, r2
 8001c72:	4618      	mov	r0, r3
 8001c74:	f001 fe21 	bl	80038ba <USB_ReadChInterrupts>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d11b      	bne.n	8001cba <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001c82:	78fb      	ldrb	r3, [r7, #3]
 8001c84:	015a      	lsls	r2, r3, #5
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	4413      	add	r3, r2
 8001c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c8e:	461a      	mov	r2, r3
 8001c90:	2304      	movs	r3, #4
 8001c92:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001c94:	78fa      	ldrb	r2, [r7, #3]
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	011b      	lsls	r3, r3, #4
 8001c9c:	1a9b      	subs	r3, r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	334d      	adds	r3, #77	; 0x4d
 8001ca4:	2207      	movs	r2, #7
 8001ca6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	78fa      	ldrb	r2, [r7, #3]
 8001cae:	4611      	mov	r1, r2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f001 fe7f 	bl	80039b4 <USB_HC_Halt>
 8001cb6:	f000 bc6f 	b.w	8002598 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	78fa      	ldrb	r2, [r7, #3]
 8001cc0:	4611      	mov	r1, r2
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f001 fdf9 	bl	80038ba <USB_ReadChInterrupts>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	f003 0320 	and.w	r3, r3, #32
 8001cce:	2b20      	cmp	r3, #32
 8001cd0:	f040 8082 	bne.w	8001dd8 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001cd4:	78fb      	ldrb	r3, [r7, #3]
 8001cd6:	015a      	lsls	r2, r3, #5
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	4413      	add	r3, r2
 8001cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	2320      	movs	r3, #32
 8001ce4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8001ce6:	78fa      	ldrb	r2, [r7, #3]
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	4613      	mov	r3, r2
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	1a9b      	subs	r3, r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	3319      	adds	r3, #25
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d124      	bne.n	8001d46 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8001cfc:	78fa      	ldrb	r2, [r7, #3]
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	011b      	lsls	r3, r3, #4
 8001d04:	1a9b      	subs	r3, r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	3319      	adds	r3, #25
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001d10:	78fa      	ldrb	r2, [r7, #3]
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	4613      	mov	r3, r2
 8001d16:	011b      	lsls	r3, r3, #4
 8001d18:	1a9b      	subs	r3, r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	334c      	adds	r3, #76	; 0x4c
 8001d20:	2202      	movs	r2, #2
 8001d22:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8001d24:	78fa      	ldrb	r2, [r7, #3]
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	011b      	lsls	r3, r3, #4
 8001d2c:	1a9b      	subs	r3, r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	334d      	adds	r3, #77	; 0x4d
 8001d34:	2203      	movs	r2, #3
 8001d36:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	78fa      	ldrb	r2, [r7, #3]
 8001d3e:	4611      	mov	r1, r2
 8001d40:	4618      	mov	r0, r3
 8001d42:	f001 fe37 	bl	80039b4 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8001d46:	78fa      	ldrb	r2, [r7, #3]
 8001d48:	6879      	ldr	r1, [r7, #4]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	011b      	lsls	r3, r3, #4
 8001d4e:	1a9b      	subs	r3, r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	440b      	add	r3, r1
 8001d54:	331a      	adds	r3, #26
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	f040 841d 	bne.w	8002598 <HCD_HC_OUT_IRQHandler+0x944>
 8001d5e:	78fa      	ldrb	r2, [r7, #3]
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	4613      	mov	r3, r2
 8001d64:	011b      	lsls	r3, r3, #4
 8001d66:	1a9b      	subs	r3, r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	331b      	adds	r3, #27
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f040 8411 	bne.w	8002598 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8001d76:	78fa      	ldrb	r2, [r7, #3]
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	011b      	lsls	r3, r3, #4
 8001d7e:	1a9b      	subs	r3, r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	440b      	add	r3, r1
 8001d84:	3326      	adds	r3, #38	; 0x26
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d009      	beq.n	8001da0 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8001d8c:	78fa      	ldrb	r2, [r7, #3]
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	1a9b      	subs	r3, r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	331b      	adds	r3, #27
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8001da0:	78fa      	ldrb	r2, [r7, #3]
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	4613      	mov	r3, r2
 8001da6:	011b      	lsls	r3, r3, #4
 8001da8:	1a9b      	subs	r3, r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	440b      	add	r3, r1
 8001dae:	334d      	adds	r3, #77	; 0x4d
 8001db0:	2203      	movs	r2, #3
 8001db2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	78fa      	ldrb	r2, [r7, #3]
 8001dba:	4611      	mov	r1, r2
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f001 fdf9 	bl	80039b4 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8001dc2:	78fa      	ldrb	r2, [r7, #3]
 8001dc4:	6879      	ldr	r1, [r7, #4]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	011b      	lsls	r3, r3, #4
 8001dca:	1a9b      	subs	r3, r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	440b      	add	r3, r1
 8001dd0:	3344      	adds	r3, #68	; 0x44
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	e3df      	b.n	8002598 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	78fa      	ldrb	r2, [r7, #3]
 8001dde:	4611      	mov	r1, r2
 8001de0:	4618      	mov	r0, r3
 8001de2:	f001 fd6a 	bl	80038ba <USB_ReadChInterrupts>
 8001de6:	4603      	mov	r3, r0
 8001de8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001df0:	d111      	bne.n	8001e16 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001df2:	78fb      	ldrb	r3, [r7, #3]
 8001df4:	015a      	lsls	r2, r3, #5
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	4413      	add	r3, r2
 8001dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dfe:	461a      	mov	r2, r3
 8001e00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e04:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	78fa      	ldrb	r2, [r7, #3]
 8001e0c:	4611      	mov	r1, r2
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f001 fdd0 	bl	80039b4 <USB_HC_Halt>
 8001e14:	e3c0      	b.n	8002598 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	78fa      	ldrb	r2, [r7, #3]
 8001e1c:	4611      	mov	r1, r2
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f001 fd4b 	bl	80038ba <USB_ReadChInterrupts>
 8001e24:	4603      	mov	r3, r0
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d168      	bne.n	8001f00 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8001e2e:	78fa      	ldrb	r2, [r7, #3]
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	011b      	lsls	r3, r3, #4
 8001e36:	1a9b      	subs	r3, r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	3344      	adds	r3, #68	; 0x44
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	78fa      	ldrb	r2, [r7, #3]
 8001e48:	4611      	mov	r1, r2
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f001 fd35 	bl	80038ba <USB_ReadChInterrupts>
 8001e50:	4603      	mov	r3, r0
 8001e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e56:	2b40      	cmp	r3, #64	; 0x40
 8001e58:	d112      	bne.n	8001e80 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8001e5a:	78fa      	ldrb	r2, [r7, #3]
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	011b      	lsls	r3, r3, #4
 8001e62:	1a9b      	subs	r3, r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	440b      	add	r3, r1
 8001e68:	3319      	adds	r3, #25
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8001e6e:	78fb      	ldrb	r3, [r7, #3]
 8001e70:	015a      	lsls	r2, r3, #5
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	4413      	add	r3, r2
 8001e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	2340      	movs	r3, #64	; 0x40
 8001e7e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8001e80:	78fa      	ldrb	r2, [r7, #3]
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	4613      	mov	r3, r2
 8001e86:	011b      	lsls	r3, r3, #4
 8001e88:	1a9b      	subs	r3, r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	331b      	adds	r3, #27
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d019      	beq.n	8001eca <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001e96:	78fa      	ldrb	r2, [r7, #3]
 8001e98:	6879      	ldr	r1, [r7, #4]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	011b      	lsls	r3, r3, #4
 8001e9e:	1a9b      	subs	r3, r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	440b      	add	r3, r1
 8001ea4:	331b      	adds	r3, #27
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001eaa:	78fb      	ldrb	r3, [r7, #3]
 8001eac:	015a      	lsls	r2, r3, #5
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	78fa      	ldrb	r2, [r7, #3]
 8001eba:	0151      	lsls	r1, r2, #5
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	440a      	add	r2, r1
 8001ec0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec8:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001eca:	78fb      	ldrb	r3, [r7, #3]
 8001ecc:	015a      	lsls	r2, r3, #5
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	2301      	movs	r3, #1
 8001eda:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8001edc:	78fa      	ldrb	r2, [r7, #3]
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	011b      	lsls	r3, r3, #4
 8001ee4:	1a9b      	subs	r3, r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	334d      	adds	r3, #77	; 0x4d
 8001eec:	2201      	movs	r2, #1
 8001eee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	78fa      	ldrb	r2, [r7, #3]
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f001 fd5b 	bl	80039b4 <USB_HC_Halt>
 8001efe:	e34b      	b.n	8002598 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	78fa      	ldrb	r2, [r7, #3]
 8001f06:	4611      	mov	r1, r2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f001 fcd6 	bl	80038ba <USB_ReadChInterrupts>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f14:	2b40      	cmp	r3, #64	; 0x40
 8001f16:	d139      	bne.n	8001f8c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8001f18:	78fa      	ldrb	r2, [r7, #3]
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	011b      	lsls	r3, r3, #4
 8001f20:	1a9b      	subs	r3, r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	334d      	adds	r3, #77	; 0x4d
 8001f28:	2205      	movs	r2, #5
 8001f2a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8001f2c:	78fa      	ldrb	r2, [r7, #3]
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	011b      	lsls	r3, r3, #4
 8001f34:	1a9b      	subs	r3, r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	331a      	adds	r3, #26
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d109      	bne.n	8001f56 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8001f42:	78fa      	ldrb	r2, [r7, #3]
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	4613      	mov	r3, r2
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	1a9b      	subs	r3, r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	440b      	add	r3, r1
 8001f50:	3319      	adds	r3, #25
 8001f52:	2201      	movs	r2, #1
 8001f54:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8001f56:	78fa      	ldrb	r2, [r7, #3]
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	011b      	lsls	r3, r3, #4
 8001f5e:	1a9b      	subs	r3, r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	440b      	add	r3, r1
 8001f64:	3344      	adds	r3, #68	; 0x44
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	78fa      	ldrb	r2, [r7, #3]
 8001f70:	4611      	mov	r1, r2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f001 fd1e 	bl	80039b4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8001f78:	78fb      	ldrb	r3, [r7, #3]
 8001f7a:	015a      	lsls	r2, r3, #5
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	4413      	add	r3, r2
 8001f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f84:	461a      	mov	r2, r3
 8001f86:	2340      	movs	r3, #64	; 0x40
 8001f88:	6093      	str	r3, [r2, #8]
 8001f8a:	e305      	b.n	8002598 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	78fa      	ldrb	r2, [r7, #3]
 8001f92:	4611      	mov	r1, r2
 8001f94:	4618      	mov	r0, r3
 8001f96:	f001 fc90 	bl	80038ba <USB_ReadChInterrupts>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	f003 0308 	and.w	r3, r3, #8
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d11a      	bne.n	8001fda <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001fa4:	78fb      	ldrb	r3, [r7, #3]
 8001fa6:	015a      	lsls	r2, r3, #5
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	4413      	add	r3, r2
 8001fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	2308      	movs	r3, #8
 8001fb4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001fb6:	78fa      	ldrb	r2, [r7, #3]
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	011b      	lsls	r3, r3, #4
 8001fbe:	1a9b      	subs	r3, r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	334d      	adds	r3, #77	; 0x4d
 8001fc6:	2206      	movs	r2, #6
 8001fc8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	78fa      	ldrb	r2, [r7, #3]
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f001 fcee 	bl	80039b4 <USB_HC_Halt>
 8001fd8:	e2de      	b.n	8002598 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	78fa      	ldrb	r2, [r7, #3]
 8001fe0:	4611      	mov	r1, r2
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f001 fc69 	bl	80038ba <USB_ReadChInterrupts>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	f003 0310 	and.w	r3, r3, #16
 8001fee:	2b10      	cmp	r3, #16
 8001ff0:	d144      	bne.n	800207c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8001ff2:	78fa      	ldrb	r2, [r7, #3]
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	011b      	lsls	r3, r3, #4
 8001ffa:	1a9b      	subs	r3, r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	440b      	add	r3, r1
 8002000:	3344      	adds	r3, #68	; 0x44
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002006:	78fa      	ldrb	r2, [r7, #3]
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	1a9b      	subs	r3, r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	440b      	add	r3, r1
 8002014:	334d      	adds	r3, #77	; 0x4d
 8002016:	2204      	movs	r2, #4
 8002018:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800201a:	78fa      	ldrb	r2, [r7, #3]
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	4613      	mov	r3, r2
 8002020:	011b      	lsls	r3, r3, #4
 8002022:	1a9b      	subs	r3, r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	440b      	add	r3, r1
 8002028:	3319      	adds	r3, #25
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d114      	bne.n	800205a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002030:	78fa      	ldrb	r2, [r7, #3]
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	011b      	lsls	r3, r3, #4
 8002038:	1a9b      	subs	r3, r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	3318      	adds	r3, #24
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d109      	bne.n	800205a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002046:	78fa      	ldrb	r2, [r7, #3]
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	011b      	lsls	r3, r3, #4
 800204e:	1a9b      	subs	r3, r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	440b      	add	r3, r1
 8002054:	3319      	adds	r3, #25
 8002056:	2201      	movs	r2, #1
 8002058:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	78fa      	ldrb	r2, [r7, #3]
 8002060:	4611      	mov	r1, r2
 8002062:	4618      	mov	r0, r3
 8002064:	f001 fca6 	bl	80039b4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002068:	78fb      	ldrb	r3, [r7, #3]
 800206a:	015a      	lsls	r2, r3, #5
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	4413      	add	r3, r2
 8002070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002074:	461a      	mov	r2, r3
 8002076:	2310      	movs	r3, #16
 8002078:	6093      	str	r3, [r2, #8]
 800207a:	e28d      	b.n	8002598 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	78fa      	ldrb	r2, [r7, #3]
 8002082:	4611      	mov	r1, r2
 8002084:	4618      	mov	r0, r3
 8002086:	f001 fc18 	bl	80038ba <USB_ReadChInterrupts>
 800208a:	4603      	mov	r3, r0
 800208c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002090:	2b80      	cmp	r3, #128	; 0x80
 8002092:	d169      	bne.n	8002168 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	799b      	ldrb	r3, [r3, #6]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d111      	bne.n	80020c0 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800209c:	78fa      	ldrb	r2, [r7, #3]
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	4613      	mov	r3, r2
 80020a2:	011b      	lsls	r3, r3, #4
 80020a4:	1a9b      	subs	r3, r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	334d      	adds	r3, #77	; 0x4d
 80020ac:	2207      	movs	r2, #7
 80020ae:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	78fa      	ldrb	r2, [r7, #3]
 80020b6:	4611      	mov	r1, r2
 80020b8:	4618      	mov	r0, r3
 80020ba:	f001 fc7b 	bl	80039b4 <USB_HC_Halt>
 80020be:	e049      	b.n	8002154 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80020c0:	78fa      	ldrb	r2, [r7, #3]
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	4613      	mov	r3, r2
 80020c6:	011b      	lsls	r3, r3, #4
 80020c8:	1a9b      	subs	r3, r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	3344      	adds	r3, #68	; 0x44
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	1c59      	adds	r1, r3, #1
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	011b      	lsls	r3, r3, #4
 80020da:	1a9b      	subs	r3, r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4403      	add	r3, r0
 80020e0:	3344      	adds	r3, #68	; 0x44
 80020e2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80020e4:	78fa      	ldrb	r2, [r7, #3]
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	4613      	mov	r3, r2
 80020ea:	011b      	lsls	r3, r3, #4
 80020ec:	1a9b      	subs	r3, r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	3344      	adds	r3, #68	; 0x44
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d922      	bls.n	8002140 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80020fa:	78fa      	ldrb	r2, [r7, #3]
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	4613      	mov	r3, r2
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	1a9b      	subs	r3, r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	440b      	add	r3, r1
 8002108:	3344      	adds	r3, #68	; 0x44
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800210e:	78fa      	ldrb	r2, [r7, #3]
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	1a9b      	subs	r3, r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	334c      	adds	r3, #76	; 0x4c
 800211e:	2204      	movs	r2, #4
 8002120:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002122:	78fa      	ldrb	r2, [r7, #3]
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	011b      	lsls	r3, r3, #4
 800212a:	1a9b      	subs	r3, r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	334c      	adds	r3, #76	; 0x4c
 8002132:	781a      	ldrb	r2, [r3, #0]
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	4619      	mov	r1, r3
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f003 f918 	bl	800536e <HAL_HCD_HC_NotifyURBChange_Callback>
 800213e:	e009      	b.n	8002154 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002140:	78fa      	ldrb	r2, [r7, #3]
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	4613      	mov	r3, r2
 8002146:	011b      	lsls	r3, r3, #4
 8002148:	1a9b      	subs	r3, r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	334c      	adds	r3, #76	; 0x4c
 8002150:	2202      	movs	r2, #2
 8002152:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002154:	78fb      	ldrb	r3, [r7, #3]
 8002156:	015a      	lsls	r2, r3, #5
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4413      	add	r3, r2
 800215c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002160:	461a      	mov	r2, r3
 8002162:	2380      	movs	r3, #128	; 0x80
 8002164:	6093      	str	r3, [r2, #8]
 8002166:	e217      	b.n	8002598 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	78fa      	ldrb	r2, [r7, #3]
 800216e:	4611      	mov	r1, r2
 8002170:	4618      	mov	r0, r3
 8002172:	f001 fba2 	bl	80038ba <USB_ReadChInterrupts>
 8002176:	4603      	mov	r3, r0
 8002178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800217c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002180:	d11b      	bne.n	80021ba <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002182:	78fa      	ldrb	r2, [r7, #3]
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	4613      	mov	r3, r2
 8002188:	011b      	lsls	r3, r3, #4
 800218a:	1a9b      	subs	r3, r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	440b      	add	r3, r1
 8002190:	334d      	adds	r3, #77	; 0x4d
 8002192:	2209      	movs	r2, #9
 8002194:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	78fa      	ldrb	r2, [r7, #3]
 800219c:	4611      	mov	r1, r2
 800219e:	4618      	mov	r0, r3
 80021a0:	f001 fc08 	bl	80039b4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80021a4:	78fb      	ldrb	r3, [r7, #3]
 80021a6:	015a      	lsls	r2, r3, #5
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b0:	461a      	mov	r2, r3
 80021b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021b6:	6093      	str	r3, [r2, #8]
 80021b8:	e1ee      	b.n	8002598 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	78fa      	ldrb	r2, [r7, #3]
 80021c0:	4611      	mov	r1, r2
 80021c2:	4618      	mov	r0, r3
 80021c4:	f001 fb79 	bl	80038ba <USB_ReadChInterrupts>
 80021c8:	4603      	mov	r3, r0
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	f040 81df 	bne.w	8002592 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80021d4:	78fb      	ldrb	r3, [r7, #3]
 80021d6:	015a      	lsls	r2, r3, #5
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	4413      	add	r3, r2
 80021dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e0:	461a      	mov	r2, r3
 80021e2:	2302      	movs	r3, #2
 80021e4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80021e6:	78fa      	ldrb	r2, [r7, #3]
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	011b      	lsls	r3, r3, #4
 80021ee:	1a9b      	subs	r3, r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	440b      	add	r3, r1
 80021f4:	334d      	adds	r3, #77	; 0x4d
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	f040 8093 	bne.w	8002324 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80021fe:	78fa      	ldrb	r2, [r7, #3]
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	4613      	mov	r3, r2
 8002204:	011b      	lsls	r3, r3, #4
 8002206:	1a9b      	subs	r3, r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	440b      	add	r3, r1
 800220c:	334d      	adds	r3, #77	; 0x4d
 800220e:	2202      	movs	r2, #2
 8002210:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002212:	78fa      	ldrb	r2, [r7, #3]
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	011b      	lsls	r3, r3, #4
 800221a:	1a9b      	subs	r3, r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	440b      	add	r3, r1
 8002220:	334c      	adds	r3, #76	; 0x4c
 8002222:	2201      	movs	r2, #1
 8002224:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002226:	78fa      	ldrb	r2, [r7, #3]
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	011b      	lsls	r3, r3, #4
 800222e:	1a9b      	subs	r3, r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	440b      	add	r3, r1
 8002234:	3326      	adds	r3, #38	; 0x26
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b02      	cmp	r3, #2
 800223a:	d00b      	beq.n	8002254 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800223c:	78fa      	ldrb	r2, [r7, #3]
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	011b      	lsls	r3, r3, #4
 8002244:	1a9b      	subs	r3, r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	3326      	adds	r3, #38	; 0x26
 800224c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800224e:	2b03      	cmp	r3, #3
 8002250:	f040 8190 	bne.w	8002574 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	799b      	ldrb	r3, [r3, #6]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d115      	bne.n	8002288 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800225c:	78fa      	ldrb	r2, [r7, #3]
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	4613      	mov	r3, r2
 8002262:	011b      	lsls	r3, r3, #4
 8002264:	1a9b      	subs	r3, r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	440b      	add	r3, r1
 800226a:	333d      	adds	r3, #61	; 0x3d
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	78fa      	ldrb	r2, [r7, #3]
 8002270:	f083 0301 	eor.w	r3, r3, #1
 8002274:	b2d8      	uxtb	r0, r3
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	4613      	mov	r3, r2
 800227a:	011b      	lsls	r3, r3, #4
 800227c:	1a9b      	subs	r3, r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	333d      	adds	r3, #61	; 0x3d
 8002284:	4602      	mov	r2, r0
 8002286:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	799b      	ldrb	r3, [r3, #6]
 800228c:	2b01      	cmp	r3, #1
 800228e:	f040 8171 	bne.w	8002574 <HCD_HC_OUT_IRQHandler+0x920>
 8002292:	78fa      	ldrb	r2, [r7, #3]
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	4613      	mov	r3, r2
 8002298:	011b      	lsls	r3, r3, #4
 800229a:	1a9b      	subs	r3, r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	440b      	add	r3, r1
 80022a0:	3334      	adds	r3, #52	; 0x34
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f000 8165 	beq.w	8002574 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80022aa:	78fa      	ldrb	r2, [r7, #3]
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	011b      	lsls	r3, r3, #4
 80022b2:	1a9b      	subs	r3, r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	440b      	add	r3, r1
 80022b8:	3334      	adds	r3, #52	; 0x34
 80022ba:	6819      	ldr	r1, [r3, #0]
 80022bc:	78fa      	ldrb	r2, [r7, #3]
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	011b      	lsls	r3, r3, #4
 80022c4:	1a9b      	subs	r3, r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4403      	add	r3, r0
 80022ca:	3328      	adds	r3, #40	; 0x28
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	440b      	add	r3, r1
 80022d0:	1e59      	subs	r1, r3, #1
 80022d2:	78fa      	ldrb	r2, [r7, #3]
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	1a9b      	subs	r3, r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4403      	add	r3, r0
 80022e0:	3328      	adds	r3, #40	; 0x28
 80022e2:	881b      	ldrh	r3, [r3, #0]
 80022e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80022e8:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 813f 	beq.w	8002574 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80022f6:	78fa      	ldrb	r2, [r7, #3]
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	011b      	lsls	r3, r3, #4
 80022fe:	1a9b      	subs	r3, r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	440b      	add	r3, r1
 8002304:	333d      	adds	r3, #61	; 0x3d
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	78fa      	ldrb	r2, [r7, #3]
 800230a:	f083 0301 	eor.w	r3, r3, #1
 800230e:	b2d8      	uxtb	r0, r3
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	1a9b      	subs	r3, r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	333d      	adds	r3, #61	; 0x3d
 800231e:	4602      	mov	r2, r0
 8002320:	701a      	strb	r2, [r3, #0]
 8002322:	e127      	b.n	8002574 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002324:	78fa      	ldrb	r2, [r7, #3]
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	011b      	lsls	r3, r3, #4
 800232c:	1a9b      	subs	r3, r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	334d      	adds	r3, #77	; 0x4d
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b03      	cmp	r3, #3
 8002338:	d120      	bne.n	800237c <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800233a:	78fa      	ldrb	r2, [r7, #3]
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	011b      	lsls	r3, r3, #4
 8002342:	1a9b      	subs	r3, r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	440b      	add	r3, r1
 8002348:	334d      	adds	r3, #77	; 0x4d
 800234a:	2202      	movs	r2, #2
 800234c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800234e:	78fa      	ldrb	r2, [r7, #3]
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	011b      	lsls	r3, r3, #4
 8002356:	1a9b      	subs	r3, r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	440b      	add	r3, r1
 800235c:	331b      	adds	r3, #27
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b01      	cmp	r3, #1
 8002362:	f040 8107 	bne.w	8002574 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002366:	78fa      	ldrb	r2, [r7, #3]
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	1a9b      	subs	r3, r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	334c      	adds	r3, #76	; 0x4c
 8002376:	2202      	movs	r2, #2
 8002378:	701a      	strb	r2, [r3, #0]
 800237a:	e0fb      	b.n	8002574 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800237c:	78fa      	ldrb	r2, [r7, #3]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	1a9b      	subs	r3, r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	334d      	adds	r3, #77	; 0x4d
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b04      	cmp	r3, #4
 8002390:	d13a      	bne.n	8002408 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002392:	78fa      	ldrb	r2, [r7, #3]
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	4613      	mov	r3, r2
 8002398:	011b      	lsls	r3, r3, #4
 800239a:	1a9b      	subs	r3, r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	440b      	add	r3, r1
 80023a0:	334d      	adds	r3, #77	; 0x4d
 80023a2:	2202      	movs	r2, #2
 80023a4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80023a6:	78fa      	ldrb	r2, [r7, #3]
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	1a9b      	subs	r3, r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	440b      	add	r3, r1
 80023b4:	334c      	adds	r3, #76	; 0x4c
 80023b6:	2202      	movs	r2, #2
 80023b8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80023ba:	78fa      	ldrb	r2, [r7, #3]
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	1a9b      	subs	r3, r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	331b      	adds	r3, #27
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	f040 80d1 	bne.w	8002574 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80023d2:	78fa      	ldrb	r2, [r7, #3]
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	011b      	lsls	r3, r3, #4
 80023da:	1a9b      	subs	r3, r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	440b      	add	r3, r1
 80023e0:	331b      	adds	r3, #27
 80023e2:	2200      	movs	r2, #0
 80023e4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	015a      	lsls	r2, r3, #5
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	78fa      	ldrb	r2, [r7, #3]
 80023f6:	0151      	lsls	r1, r2, #5
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	440a      	add	r2, r1
 80023fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002404:	6053      	str	r3, [r2, #4]
 8002406:	e0b5      	b.n	8002574 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002408:	78fa      	ldrb	r2, [r7, #3]
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	4613      	mov	r3, r2
 800240e:	011b      	lsls	r3, r3, #4
 8002410:	1a9b      	subs	r3, r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	334d      	adds	r3, #77	; 0x4d
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b05      	cmp	r3, #5
 800241c:	d114      	bne.n	8002448 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800241e:	78fa      	ldrb	r2, [r7, #3]
 8002420:	6879      	ldr	r1, [r7, #4]
 8002422:	4613      	mov	r3, r2
 8002424:	011b      	lsls	r3, r3, #4
 8002426:	1a9b      	subs	r3, r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	440b      	add	r3, r1
 800242c:	334d      	adds	r3, #77	; 0x4d
 800242e:	2202      	movs	r2, #2
 8002430:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8002432:	78fa      	ldrb	r2, [r7, #3]
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	4613      	mov	r3, r2
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	1a9b      	subs	r3, r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	440b      	add	r3, r1
 8002440:	334c      	adds	r3, #76	; 0x4c
 8002442:	2202      	movs	r2, #2
 8002444:	701a      	strb	r2, [r3, #0]
 8002446:	e095      	b.n	8002574 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002448:	78fa      	ldrb	r2, [r7, #3]
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	1a9b      	subs	r3, r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	334d      	adds	r3, #77	; 0x4d
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b06      	cmp	r3, #6
 800245c:	d114      	bne.n	8002488 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800245e:	78fa      	ldrb	r2, [r7, #3]
 8002460:	6879      	ldr	r1, [r7, #4]
 8002462:	4613      	mov	r3, r2
 8002464:	011b      	lsls	r3, r3, #4
 8002466:	1a9b      	subs	r3, r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	440b      	add	r3, r1
 800246c:	334d      	adds	r3, #77	; 0x4d
 800246e:	2202      	movs	r2, #2
 8002470:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8002472:	78fa      	ldrb	r2, [r7, #3]
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	4613      	mov	r3, r2
 8002478:	011b      	lsls	r3, r3, #4
 800247a:	1a9b      	subs	r3, r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	440b      	add	r3, r1
 8002480:	334c      	adds	r3, #76	; 0x4c
 8002482:	2205      	movs	r2, #5
 8002484:	701a      	strb	r2, [r3, #0]
 8002486:	e075      	b.n	8002574 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002488:	78fa      	ldrb	r2, [r7, #3]
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	1a9b      	subs	r3, r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	334d      	adds	r3, #77	; 0x4d
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b07      	cmp	r3, #7
 800249c:	d00a      	beq.n	80024b4 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800249e:	78fa      	ldrb	r2, [r7, #3]
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	1a9b      	subs	r3, r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	440b      	add	r3, r1
 80024ac:	334d      	adds	r3, #77	; 0x4d
 80024ae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80024b0:	2b09      	cmp	r3, #9
 80024b2:	d170      	bne.n	8002596 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80024b4:	78fa      	ldrb	r2, [r7, #3]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	1a9b      	subs	r3, r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	334d      	adds	r3, #77	; 0x4d
 80024c4:	2202      	movs	r2, #2
 80024c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80024c8:	78fa      	ldrb	r2, [r7, #3]
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	011b      	lsls	r3, r3, #4
 80024d0:	1a9b      	subs	r3, r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	3344      	adds	r3, #68	; 0x44
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	1c59      	adds	r1, r3, #1
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	4613      	mov	r3, r2
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	1a9b      	subs	r3, r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	4403      	add	r3, r0
 80024e8:	3344      	adds	r3, #68	; 0x44
 80024ea:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80024ec:	78fa      	ldrb	r2, [r7, #3]
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	011b      	lsls	r3, r3, #4
 80024f4:	1a9b      	subs	r3, r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	3344      	adds	r3, #68	; 0x44
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d914      	bls.n	800252c <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002502:	78fa      	ldrb	r2, [r7, #3]
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	1a9b      	subs	r3, r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	440b      	add	r3, r1
 8002510:	3344      	adds	r3, #68	; 0x44
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002516:	78fa      	ldrb	r2, [r7, #3]
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	011b      	lsls	r3, r3, #4
 800251e:	1a9b      	subs	r3, r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	440b      	add	r3, r1
 8002524:	334c      	adds	r3, #76	; 0x4c
 8002526:	2204      	movs	r2, #4
 8002528:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800252a:	e022      	b.n	8002572 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800252c:	78fa      	ldrb	r2, [r7, #3]
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	4613      	mov	r3, r2
 8002532:	011b      	lsls	r3, r3, #4
 8002534:	1a9b      	subs	r3, r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	334c      	adds	r3, #76	; 0x4c
 800253c:	2202      	movs	r2, #2
 800253e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002540:	78fb      	ldrb	r3, [r7, #3]
 8002542:	015a      	lsls	r2, r3, #5
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4413      	add	r3, r2
 8002548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002556:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800255e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002560:	78fb      	ldrb	r3, [r7, #3]
 8002562:	015a      	lsls	r2, r3, #5
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4413      	add	r3, r2
 8002568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256c:	461a      	mov	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002572:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002574:	78fa      	ldrb	r2, [r7, #3]
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	011b      	lsls	r3, r3, #4
 800257c:	1a9b      	subs	r3, r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	334c      	adds	r3, #76	; 0x4c
 8002584:	781a      	ldrb	r2, [r3, #0]
 8002586:	78fb      	ldrb	r3, [r7, #3]
 8002588:	4619      	mov	r1, r3
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f002 feef 	bl	800536e <HAL_HCD_HC_NotifyURBChange_Callback>
 8002590:	e002      	b.n	8002598 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8002592:	bf00      	nop
 8002594:	e000      	b.n	8002598 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8002596:	bf00      	nop
  }
}
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b08a      	sub	sp, #40	; 0x28
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	0c5b      	lsrs	r3, r3, #17
 80025c4:	f003 030f 	and.w	r3, r3, #15
 80025c8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	091b      	lsrs	r3, r3, #4
 80025ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025d2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d004      	beq.n	80025e4 <HCD_RXQLVL_IRQHandler+0x46>
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	2b05      	cmp	r3, #5
 80025de:	f000 80b6 	beq.w	800274e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80025e2:	e0b7      	b.n	8002754 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 80b3 	beq.w	8002752 <HCD_RXQLVL_IRQHandler+0x1b4>
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4613      	mov	r3, r2
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	1a9b      	subs	r3, r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	332c      	adds	r3, #44	; 0x2c
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 80a7 	beq.w	8002752 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8002604:	6879      	ldr	r1, [r7, #4]
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4613      	mov	r3, r2
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	1a9b      	subs	r3, r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	3338      	adds	r3, #56	; 0x38
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	18d1      	adds	r1, r2, r3
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4613      	mov	r3, r2
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	1a9b      	subs	r3, r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4403      	add	r3, r0
 8002628:	3334      	adds	r3, #52	; 0x34
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4299      	cmp	r1, r3
 800262e:	f200 8083 	bhi.w	8002738 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6818      	ldr	r0, [r3, #0]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4613      	mov	r3, r2
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	1a9b      	subs	r3, r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	440b      	add	r3, r1
 8002644:	332c      	adds	r3, #44	; 0x2c
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	b292      	uxth	r2, r2
 800264c:	4619      	mov	r1, r3
 800264e:	f001 f8c9 	bl	80037e4 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4613      	mov	r3, r2
 8002658:	011b      	lsls	r3, r3, #4
 800265a:	1a9b      	subs	r3, r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	440b      	add	r3, r1
 8002660:	332c      	adds	r3, #44	; 0x2c
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	18d1      	adds	r1, r2, r3
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4613      	mov	r3, r2
 800266e:	011b      	lsls	r3, r3, #4
 8002670:	1a9b      	subs	r3, r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4403      	add	r3, r0
 8002676:	332c      	adds	r3, #44	; 0x2c
 8002678:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4613      	mov	r3, r2
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	1a9b      	subs	r3, r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	440b      	add	r3, r1
 8002688:	3338      	adds	r3, #56	; 0x38
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	18d1      	adds	r1, r2, r3
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4613      	mov	r3, r2
 8002696:	011b      	lsls	r3, r3, #4
 8002698:	1a9b      	subs	r3, r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4403      	add	r3, r0
 800269e:	3338      	adds	r3, #56	; 0x38
 80026a0:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	015a      	lsls	r2, r3, #5
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	4413      	add	r3, r2
 80026aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	0cdb      	lsrs	r3, r3, #19
 80026b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026b6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4613      	mov	r3, r2
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	1a9b      	subs	r3, r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	3328      	adds	r3, #40	; 0x28
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	461a      	mov	r2, r3
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d13f      	bne.n	8002752 <HCD_RXQLVL_IRQHandler+0x1b4>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d03c      	beq.n	8002752 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	015a      	lsls	r2, r3, #5
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	4413      	add	r3, r2
 80026e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026ee:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026f6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002704:	461a      	mov	r2, r3
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4613      	mov	r3, r2
 8002710:	011b      	lsls	r3, r3, #4
 8002712:	1a9b      	subs	r3, r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	333c      	adds	r3, #60	; 0x3c
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	f083 0301 	eor.w	r3, r3, #1
 8002720:	b2d8      	uxtb	r0, r3
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4613      	mov	r3, r2
 8002728:	011b      	lsls	r3, r3, #4
 800272a:	1a9b      	subs	r3, r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	440b      	add	r3, r1
 8002730:	333c      	adds	r3, #60	; 0x3c
 8002732:	4602      	mov	r2, r0
 8002734:	701a      	strb	r2, [r3, #0]
      break;
 8002736:	e00c      	b.n	8002752 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4613      	mov	r3, r2
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	1a9b      	subs	r3, r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	334c      	adds	r3, #76	; 0x4c
 8002748:	2204      	movs	r2, #4
 800274a:	701a      	strb	r2, [r3, #0]
      break;
 800274c:	e001      	b.n	8002752 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800274e:	bf00      	nop
 8002750:	e000      	b.n	8002754 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8002752:	bf00      	nop
  }
}
 8002754:	bf00      	nop
 8002756:	3728      	adds	r7, #40	; 0x28
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002788:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b02      	cmp	r3, #2
 8002792:	d10b      	bne.n	80027ac <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b01      	cmp	r3, #1
 800279c:	d102      	bne.n	80027a4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f002 fdc9 	bl	8005336 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	f043 0302 	orr.w	r3, r3, #2
 80027aa:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	2b08      	cmp	r3, #8
 80027b4:	d132      	bne.n	800281c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	f043 0308 	orr.w	r3, r3, #8
 80027bc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d126      	bne.n	8002816 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	7a5b      	ldrb	r3, [r3, #9]
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d113      	bne.n	80027f8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80027d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80027da:	d106      	bne.n	80027ea <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2102      	movs	r1, #2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f001 f898 	bl	8003918 <USB_InitFSLSPClkSel>
 80027e8:	e011      	b.n	800280e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2101      	movs	r1, #1
 80027f0:	4618      	mov	r0, r3
 80027f2:	f001 f891 	bl	8003918 <USB_InitFSLSPClkSel>
 80027f6:	e00a      	b.n	800280e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	79db      	ldrb	r3, [r3, #7]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d106      	bne.n	800280e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002806:	461a      	mov	r2, r3
 8002808:	f64e 2360 	movw	r3, #60000	; 0xea60
 800280c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f002 fdbf 	bl	8005392 <HAL_HCD_PortEnabled_Callback>
 8002814:	e002      	b.n	800281c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f002 fdc9 	bl	80053ae <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f003 0320 	and.w	r3, r3, #32
 8002822:	2b20      	cmp	r3, #32
 8002824:	d103      	bne.n	800282e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	f043 0320 	orr.w	r3, r3, #32
 800282c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002834:	461a      	mov	r2, r3
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	6013      	str	r3, [r2, #0]
}
 800283a:	bf00      	nop
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
	...

08002844 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e267      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	d075      	beq.n	800294e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002862:	4b88      	ldr	r3, [pc, #544]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 030c 	and.w	r3, r3, #12
 800286a:	2b04      	cmp	r3, #4
 800286c:	d00c      	beq.n	8002888 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800286e:	4b85      	ldr	r3, [pc, #532]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002876:	2b08      	cmp	r3, #8
 8002878:	d112      	bne.n	80028a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800287a:	4b82      	ldr	r3, [pc, #520]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002882:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002886:	d10b      	bne.n	80028a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002888:	4b7e      	ldr	r3, [pc, #504]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d05b      	beq.n	800294c <HAL_RCC_OscConfig+0x108>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d157      	bne.n	800294c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e242      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a8:	d106      	bne.n	80028b8 <HAL_RCC_OscConfig+0x74>
 80028aa:	4b76      	ldr	r3, [pc, #472]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a75      	ldr	r2, [pc, #468]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80028b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	e01d      	b.n	80028f4 <HAL_RCC_OscConfig+0xb0>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028c0:	d10c      	bne.n	80028dc <HAL_RCC_OscConfig+0x98>
 80028c2:	4b70      	ldr	r3, [pc, #448]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a6f      	ldr	r2, [pc, #444]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80028c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	4b6d      	ldr	r3, [pc, #436]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a6c      	ldr	r2, [pc, #432]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80028d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	e00b      	b.n	80028f4 <HAL_RCC_OscConfig+0xb0>
 80028dc:	4b69      	ldr	r3, [pc, #420]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a68      	ldr	r2, [pc, #416]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80028e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028e6:	6013      	str	r3, [r2, #0]
 80028e8:	4b66      	ldr	r3, [pc, #408]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a65      	ldr	r2, [pc, #404]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80028ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d013      	beq.n	8002924 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fc:	f7fd fe2c 	bl	8000558 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002904:	f7fd fe28 	bl	8000558 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b64      	cmp	r3, #100	; 0x64
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e207      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002916:	4b5b      	ldr	r3, [pc, #364]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0f0      	beq.n	8002904 <HAL_RCC_OscConfig+0xc0>
 8002922:	e014      	b.n	800294e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002924:	f7fd fe18 	bl	8000558 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800292c:	f7fd fe14 	bl	8000558 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b64      	cmp	r3, #100	; 0x64
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e1f3      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800293e:	4b51      	ldr	r3, [pc, #324]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f0      	bne.n	800292c <HAL_RCC_OscConfig+0xe8>
 800294a:	e000      	b.n	800294e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800294c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d063      	beq.n	8002a22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800295a:	4b4a      	ldr	r3, [pc, #296]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 030c 	and.w	r3, r3, #12
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00b      	beq.n	800297e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002966:	4b47      	ldr	r3, [pc, #284]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800296e:	2b08      	cmp	r3, #8
 8002970:	d11c      	bne.n	80029ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002972:	4b44      	ldr	r3, [pc, #272]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d116      	bne.n	80029ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800297e:	4b41      	ldr	r3, [pc, #260]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d005      	beq.n	8002996 <HAL_RCC_OscConfig+0x152>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d001      	beq.n	8002996 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e1c7      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002996:	4b3b      	ldr	r3, [pc, #236]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	4937      	ldr	r1, [pc, #220]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029aa:	e03a      	b.n	8002a22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d020      	beq.n	80029f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029b4:	4b34      	ldr	r3, [pc, #208]	; (8002a88 <HAL_RCC_OscConfig+0x244>)
 80029b6:	2201      	movs	r2, #1
 80029b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ba:	f7fd fdcd 	bl	8000558 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029c2:	f7fd fdc9 	bl	8000558 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e1a8      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d4:	4b2b      	ldr	r3, [pc, #172]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0f0      	beq.n	80029c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e0:	4b28      	ldr	r3, [pc, #160]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	4925      	ldr	r1, [pc, #148]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	600b      	str	r3, [r1, #0]
 80029f4:	e015      	b.n	8002a22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029f6:	4b24      	ldr	r3, [pc, #144]	; (8002a88 <HAL_RCC_OscConfig+0x244>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fc:	f7fd fdac 	bl	8000558 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a04:	f7fd fda8 	bl	8000558 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e187      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a16:	4b1b      	ldr	r3, [pc, #108]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1f0      	bne.n	8002a04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0308 	and.w	r3, r3, #8
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d036      	beq.n	8002a9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d016      	beq.n	8002a64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a36:	4b15      	ldr	r3, [pc, #84]	; (8002a8c <HAL_RCC_OscConfig+0x248>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3c:	f7fd fd8c 	bl	8000558 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a44:	f7fd fd88 	bl	8000558 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e167      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a56:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <HAL_RCC_OscConfig+0x240>)
 8002a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0f0      	beq.n	8002a44 <HAL_RCC_OscConfig+0x200>
 8002a62:	e01b      	b.n	8002a9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a64:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <HAL_RCC_OscConfig+0x248>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a6a:	f7fd fd75 	bl	8000558 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a70:	e00e      	b.n	8002a90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a72:	f7fd fd71 	bl	8000558 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d907      	bls.n	8002a90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e150      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
 8002a84:	40023800 	.word	0x40023800
 8002a88:	42470000 	.word	0x42470000
 8002a8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a90:	4b88      	ldr	r3, [pc, #544]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1ea      	bne.n	8002a72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 8097 	beq.w	8002bd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aae:	4b81      	ldr	r3, [pc, #516]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10f      	bne.n	8002ada <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	60bb      	str	r3, [r7, #8]
 8002abe:	4b7d      	ldr	r3, [pc, #500]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	4a7c      	ldr	r2, [pc, #496]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aca:	4b7a      	ldr	r3, [pc, #488]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad2:	60bb      	str	r3, [r7, #8]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ada:	4b77      	ldr	r3, [pc, #476]	; (8002cb8 <HAL_RCC_OscConfig+0x474>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d118      	bne.n	8002b18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ae6:	4b74      	ldr	r3, [pc, #464]	; (8002cb8 <HAL_RCC_OscConfig+0x474>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a73      	ldr	r2, [pc, #460]	; (8002cb8 <HAL_RCC_OscConfig+0x474>)
 8002aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002af2:	f7fd fd31 	bl	8000558 <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002afa:	f7fd fd2d 	bl	8000558 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e10c      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0c:	4b6a      	ldr	r3, [pc, #424]	; (8002cb8 <HAL_RCC_OscConfig+0x474>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0f0      	beq.n	8002afa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d106      	bne.n	8002b2e <HAL_RCC_OscConfig+0x2ea>
 8002b20:	4b64      	ldr	r3, [pc, #400]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b24:	4a63      	ldr	r2, [pc, #396]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b2c:	e01c      	b.n	8002b68 <HAL_RCC_OscConfig+0x324>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	2b05      	cmp	r3, #5
 8002b34:	d10c      	bne.n	8002b50 <HAL_RCC_OscConfig+0x30c>
 8002b36:	4b5f      	ldr	r3, [pc, #380]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3a:	4a5e      	ldr	r2, [pc, #376]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002b3c:	f043 0304 	orr.w	r3, r3, #4
 8002b40:	6713      	str	r3, [r2, #112]	; 0x70
 8002b42:	4b5c      	ldr	r3, [pc, #368]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b46:	4a5b      	ldr	r2, [pc, #364]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b4e:	e00b      	b.n	8002b68 <HAL_RCC_OscConfig+0x324>
 8002b50:	4b58      	ldr	r3, [pc, #352]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b54:	4a57      	ldr	r2, [pc, #348]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002b56:	f023 0301 	bic.w	r3, r3, #1
 8002b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b5c:	4b55      	ldr	r3, [pc, #340]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b60:	4a54      	ldr	r2, [pc, #336]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002b62:	f023 0304 	bic.w	r3, r3, #4
 8002b66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d015      	beq.n	8002b9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b70:	f7fd fcf2 	bl	8000558 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b76:	e00a      	b.n	8002b8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b78:	f7fd fcee 	bl	8000558 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e0cb      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8e:	4b49      	ldr	r3, [pc, #292]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0ee      	beq.n	8002b78 <HAL_RCC_OscConfig+0x334>
 8002b9a:	e014      	b.n	8002bc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b9c:	f7fd fcdc 	bl	8000558 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba2:	e00a      	b.n	8002bba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ba4:	f7fd fcd8 	bl	8000558 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e0b5      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bba:	4b3e      	ldr	r3, [pc, #248]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1ee      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bc6:	7dfb      	ldrb	r3, [r7, #23]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d105      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bcc:	4b39      	ldr	r3, [pc, #228]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	4a38      	ldr	r2, [pc, #224]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002bd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bd6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 80a1 	beq.w	8002d24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002be2:	4b34      	ldr	r3, [pc, #208]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 030c 	and.w	r3, r3, #12
 8002bea:	2b08      	cmp	r3, #8
 8002bec:	d05c      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d141      	bne.n	8002c7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf6:	4b31      	ldr	r3, [pc, #196]	; (8002cbc <HAL_RCC_OscConfig+0x478>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfc:	f7fd fcac 	bl	8000558 <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c04:	f7fd fca8 	bl	8000558 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e087      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c16:	4b27      	ldr	r3, [pc, #156]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f0      	bne.n	8002c04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69da      	ldr	r2, [r3, #28]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	019b      	lsls	r3, r3, #6
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c38:	085b      	lsrs	r3, r3, #1
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	041b      	lsls	r3, r3, #16
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c44:	061b      	lsls	r3, r3, #24
 8002c46:	491b      	ldr	r1, [pc, #108]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c4c:	4b1b      	ldr	r3, [pc, #108]	; (8002cbc <HAL_RCC_OscConfig+0x478>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c52:	f7fd fc81 	bl	8000558 <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c5a:	f7fd fc7d 	bl	8000558 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e05c      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c6c:	4b11      	ldr	r3, [pc, #68]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0f0      	beq.n	8002c5a <HAL_RCC_OscConfig+0x416>
 8002c78:	e054      	b.n	8002d24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7a:	4b10      	ldr	r3, [pc, #64]	; (8002cbc <HAL_RCC_OscConfig+0x478>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c80:	f7fd fc6a 	bl	8000558 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c88:	f7fd fc66 	bl	8000558 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e045      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9a:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <HAL_RCC_OscConfig+0x470>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f0      	bne.n	8002c88 <HAL_RCC_OscConfig+0x444>
 8002ca6:	e03d      	b.n	8002d24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d107      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e038      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	40007000 	.word	0x40007000
 8002cbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cc0:	4b1b      	ldr	r3, [pc, #108]	; (8002d30 <HAL_RCC_OscConfig+0x4ec>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d028      	beq.n	8002d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d121      	bne.n	8002d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d11a      	bne.n	8002d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cf6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d111      	bne.n	8002d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d06:	085b      	lsrs	r3, r3, #1
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d107      	bne.n	8002d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d001      	beq.n	8002d24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e000      	b.n	8002d26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40023800 	.word	0x40023800

08002d34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e0cc      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d48:	4b68      	ldr	r3, [pc, #416]	; (8002eec <HAL_RCC_ClockConfig+0x1b8>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 030f 	and.w	r3, r3, #15
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d90c      	bls.n	8002d70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d56:	4b65      	ldr	r3, [pc, #404]	; (8002eec <HAL_RCC_ClockConfig+0x1b8>)
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5e:	4b63      	ldr	r3, [pc, #396]	; (8002eec <HAL_RCC_ClockConfig+0x1b8>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d001      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e0b8      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d020      	beq.n	8002dbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d005      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d88:	4b59      	ldr	r3, [pc, #356]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	4a58      	ldr	r2, [pc, #352]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0308 	and.w	r3, r3, #8
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d005      	beq.n	8002dac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002da0:	4b53      	ldr	r3, [pc, #332]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	4a52      	ldr	r2, [pc, #328]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002daa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dac:	4b50      	ldr	r3, [pc, #320]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	494d      	ldr	r1, [pc, #308]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d044      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d107      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd2:	4b47      	ldr	r3, [pc, #284]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d119      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e07f      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d003      	beq.n	8002df2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dee:	2b03      	cmp	r3, #3
 8002df0:	d107      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df2:	4b3f      	ldr	r3, [pc, #252]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d109      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e06f      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e02:	4b3b      	ldr	r3, [pc, #236]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e067      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e12:	4b37      	ldr	r3, [pc, #220]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f023 0203 	bic.w	r2, r3, #3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	4934      	ldr	r1, [pc, #208]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e24:	f7fd fb98 	bl	8000558 <HAL_GetTick>
 8002e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2a:	e00a      	b.n	8002e42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e2c:	f7fd fb94 	bl	8000558 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e04f      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e42:	4b2b      	ldr	r3, [pc, #172]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 020c 	and.w	r2, r3, #12
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d1eb      	bne.n	8002e2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e54:	4b25      	ldr	r3, [pc, #148]	; (8002eec <HAL_RCC_ClockConfig+0x1b8>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 030f 	and.w	r3, r3, #15
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d20c      	bcs.n	8002e7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e62:	4b22      	ldr	r3, [pc, #136]	; (8002eec <HAL_RCC_ClockConfig+0x1b8>)
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6a:	4b20      	ldr	r3, [pc, #128]	; (8002eec <HAL_RCC_ClockConfig+0x1b8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d001      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e032      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d008      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e88:	4b19      	ldr	r3, [pc, #100]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	4916      	ldr	r1, [pc, #88]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0308 	and.w	r3, r3, #8
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d009      	beq.n	8002eba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ea6:	4b12      	ldr	r3, [pc, #72]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	490e      	ldr	r1, [pc, #56]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eba:	f000 f821 	bl	8002f00 <HAL_RCC_GetSysClockFreq>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	091b      	lsrs	r3, r3, #4
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	490a      	ldr	r1, [pc, #40]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8002ecc:	5ccb      	ldrb	r3, [r1, r3]
 8002ece:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed2:	4a09      	ldr	r2, [pc, #36]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ed6:	4b09      	ldr	r3, [pc, #36]	; (8002efc <HAL_RCC_ClockConfig+0x1c8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f002 f932 	bl	8005144 <HAL_InitTick>

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	40023c00 	.word	0x40023c00
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	080054d4 	.word	0x080054d4
 8002ef8:	2000000c 	.word	0x2000000c
 8002efc:	20000000 	.word	0x20000000

08002f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f04:	b094      	sub	sp, #80	; 0x50
 8002f06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	647b      	str	r3, [r7, #68]	; 0x44
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f10:	2300      	movs	r3, #0
 8002f12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f18:	4b79      	ldr	r3, [pc, #484]	; (8003100 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 030c 	and.w	r3, r3, #12
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d00d      	beq.n	8002f40 <HAL_RCC_GetSysClockFreq+0x40>
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	f200 80e1 	bhi.w	80030ec <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d002      	beq.n	8002f34 <HAL_RCC_GetSysClockFreq+0x34>
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d003      	beq.n	8002f3a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f32:	e0db      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f34:	4b73      	ldr	r3, [pc, #460]	; (8003104 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f36:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002f38:	e0db      	b.n	80030f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f3a:	4b73      	ldr	r3, [pc, #460]	; (8003108 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f3e:	e0d8      	b.n	80030f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f40:	4b6f      	ldr	r3, [pc, #444]	; (8003100 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f48:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f4a:	4b6d      	ldr	r3, [pc, #436]	; (8003100 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d063      	beq.n	800301e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f56:	4b6a      	ldr	r3, [pc, #424]	; (8003100 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	099b      	lsrs	r3, r3, #6
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f68:	633b      	str	r3, [r7, #48]	; 0x30
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f72:	4622      	mov	r2, r4
 8002f74:	462b      	mov	r3, r5
 8002f76:	f04f 0000 	mov.w	r0, #0
 8002f7a:	f04f 0100 	mov.w	r1, #0
 8002f7e:	0159      	lsls	r1, r3, #5
 8002f80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f84:	0150      	lsls	r0, r2, #5
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	4621      	mov	r1, r4
 8002f8c:	1a51      	subs	r1, r2, r1
 8002f8e:	6139      	str	r1, [r7, #16]
 8002f90:	4629      	mov	r1, r5
 8002f92:	eb63 0301 	sbc.w	r3, r3, r1
 8002f96:	617b      	str	r3, [r7, #20]
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	f04f 0300 	mov.w	r3, #0
 8002fa0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fa4:	4659      	mov	r1, fp
 8002fa6:	018b      	lsls	r3, r1, #6
 8002fa8:	4651      	mov	r1, sl
 8002faa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fae:	4651      	mov	r1, sl
 8002fb0:	018a      	lsls	r2, r1, #6
 8002fb2:	4651      	mov	r1, sl
 8002fb4:	ebb2 0801 	subs.w	r8, r2, r1
 8002fb8:	4659      	mov	r1, fp
 8002fba:	eb63 0901 	sbc.w	r9, r3, r1
 8002fbe:	f04f 0200 	mov.w	r2, #0
 8002fc2:	f04f 0300 	mov.w	r3, #0
 8002fc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fd2:	4690      	mov	r8, r2
 8002fd4:	4699      	mov	r9, r3
 8002fd6:	4623      	mov	r3, r4
 8002fd8:	eb18 0303 	adds.w	r3, r8, r3
 8002fdc:	60bb      	str	r3, [r7, #8]
 8002fde:	462b      	mov	r3, r5
 8002fe0:	eb49 0303 	adc.w	r3, r9, r3
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	f04f 0200 	mov.w	r2, #0
 8002fea:	f04f 0300 	mov.w	r3, #0
 8002fee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ff2:	4629      	mov	r1, r5
 8002ff4:	024b      	lsls	r3, r1, #9
 8002ff6:	4621      	mov	r1, r4
 8002ff8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ffc:	4621      	mov	r1, r4
 8002ffe:	024a      	lsls	r2, r1, #9
 8003000:	4610      	mov	r0, r2
 8003002:	4619      	mov	r1, r3
 8003004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003006:	2200      	movs	r2, #0
 8003008:	62bb      	str	r3, [r7, #40]	; 0x28
 800300a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800300c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003010:	f7fd f8ee 	bl	80001f0 <__aeabi_uldivmod>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	4613      	mov	r3, r2
 800301a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800301c:	e058      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800301e:	4b38      	ldr	r3, [pc, #224]	; (8003100 <HAL_RCC_GetSysClockFreq+0x200>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	099b      	lsrs	r3, r3, #6
 8003024:	2200      	movs	r2, #0
 8003026:	4618      	mov	r0, r3
 8003028:	4611      	mov	r1, r2
 800302a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800302e:	623b      	str	r3, [r7, #32]
 8003030:	2300      	movs	r3, #0
 8003032:	627b      	str	r3, [r7, #36]	; 0x24
 8003034:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003038:	4642      	mov	r2, r8
 800303a:	464b      	mov	r3, r9
 800303c:	f04f 0000 	mov.w	r0, #0
 8003040:	f04f 0100 	mov.w	r1, #0
 8003044:	0159      	lsls	r1, r3, #5
 8003046:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800304a:	0150      	lsls	r0, r2, #5
 800304c:	4602      	mov	r2, r0
 800304e:	460b      	mov	r3, r1
 8003050:	4641      	mov	r1, r8
 8003052:	ebb2 0a01 	subs.w	sl, r2, r1
 8003056:	4649      	mov	r1, r9
 8003058:	eb63 0b01 	sbc.w	fp, r3, r1
 800305c:	f04f 0200 	mov.w	r2, #0
 8003060:	f04f 0300 	mov.w	r3, #0
 8003064:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003068:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800306c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003070:	ebb2 040a 	subs.w	r4, r2, sl
 8003074:	eb63 050b 	sbc.w	r5, r3, fp
 8003078:	f04f 0200 	mov.w	r2, #0
 800307c:	f04f 0300 	mov.w	r3, #0
 8003080:	00eb      	lsls	r3, r5, #3
 8003082:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003086:	00e2      	lsls	r2, r4, #3
 8003088:	4614      	mov	r4, r2
 800308a:	461d      	mov	r5, r3
 800308c:	4643      	mov	r3, r8
 800308e:	18e3      	adds	r3, r4, r3
 8003090:	603b      	str	r3, [r7, #0]
 8003092:	464b      	mov	r3, r9
 8003094:	eb45 0303 	adc.w	r3, r5, r3
 8003098:	607b      	str	r3, [r7, #4]
 800309a:	f04f 0200 	mov.w	r2, #0
 800309e:	f04f 0300 	mov.w	r3, #0
 80030a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030a6:	4629      	mov	r1, r5
 80030a8:	028b      	lsls	r3, r1, #10
 80030aa:	4621      	mov	r1, r4
 80030ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030b0:	4621      	mov	r1, r4
 80030b2:	028a      	lsls	r2, r1, #10
 80030b4:	4610      	mov	r0, r2
 80030b6:	4619      	mov	r1, r3
 80030b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030ba:	2200      	movs	r2, #0
 80030bc:	61bb      	str	r3, [r7, #24]
 80030be:	61fa      	str	r2, [r7, #28]
 80030c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030c4:	f7fd f894 	bl	80001f0 <__aeabi_uldivmod>
 80030c8:	4602      	mov	r2, r0
 80030ca:	460b      	mov	r3, r1
 80030cc:	4613      	mov	r3, r2
 80030ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030d0:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <HAL_RCC_GetSysClockFreq+0x200>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	0c1b      	lsrs	r3, r3, #16
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	3301      	adds	r3, #1
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80030e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030ea:	e002      	b.n	80030f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030ec:	4b05      	ldr	r3, [pc, #20]	; (8003104 <HAL_RCC_GetSysClockFreq+0x204>)
 80030ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3750      	adds	r7, #80	; 0x50
 80030f8:	46bd      	mov	sp, r7
 80030fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030fe:	bf00      	nop
 8003100:	40023800 	.word	0x40023800
 8003104:	00f42400 	.word	0x00f42400
 8003108:	007a1200 	.word	0x007a1200

0800310c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003110:	4b03      	ldr	r3, [pc, #12]	; (8003120 <HAL_RCC_GetHCLKFreq+0x14>)
 8003112:	681b      	ldr	r3, [r3, #0]
}
 8003114:	4618      	mov	r0, r3
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	2000000c 	.word	0x2000000c

08003124 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003128:	f7ff fff0 	bl	800310c <HAL_RCC_GetHCLKFreq>
 800312c:	4602      	mov	r2, r0
 800312e:	4b05      	ldr	r3, [pc, #20]	; (8003144 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	0a9b      	lsrs	r3, r3, #10
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	4903      	ldr	r1, [pc, #12]	; (8003148 <HAL_RCC_GetPCLK1Freq+0x24>)
 800313a:	5ccb      	ldrb	r3, [r1, r3]
 800313c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003140:	4618      	mov	r0, r3
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40023800 	.word	0x40023800
 8003148:	080054e4 	.word	0x080054e4

0800314c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	220f      	movs	r2, #15
 800315a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800315c:	4b12      	ldr	r3, [pc, #72]	; (80031a8 <HAL_RCC_GetClockConfig+0x5c>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f003 0203 	and.w	r2, r3, #3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003168:	4b0f      	ldr	r3, [pc, #60]	; (80031a8 <HAL_RCC_GetClockConfig+0x5c>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003174:	4b0c      	ldr	r3, [pc, #48]	; (80031a8 <HAL_RCC_GetClockConfig+0x5c>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003180:	4b09      	ldr	r3, [pc, #36]	; (80031a8 <HAL_RCC_GetClockConfig+0x5c>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	08db      	lsrs	r3, r3, #3
 8003186:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800318e:	4b07      	ldr	r3, [pc, #28]	; (80031ac <HAL_RCC_GetClockConfig+0x60>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 020f 	and.w	r2, r3, #15
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	601a      	str	r2, [r3, #0]
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	40023800 	.word	0x40023800
 80031ac:	40023c00 	.word	0x40023c00

080031b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e041      	b.n	8003246 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d106      	bne.n	80031dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f001 ff92 	bl	8005100 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3304      	adds	r3, #4
 80031ec:	4619      	mov	r1, r3
 80031ee:	4610      	mov	r0, r2
 80031f0:	f000 f9b6 	bl	8003560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b01      	cmp	r3, #1
 8003262:	d001      	beq.n	8003268 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e04e      	b.n	8003306 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68da      	ldr	r2, [r3, #12]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f042 0201 	orr.w	r2, r2, #1
 800327e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a23      	ldr	r2, [pc, #140]	; (8003314 <HAL_TIM_Base_Start_IT+0xc4>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d022      	beq.n	80032d0 <HAL_TIM_Base_Start_IT+0x80>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003292:	d01d      	beq.n	80032d0 <HAL_TIM_Base_Start_IT+0x80>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a1f      	ldr	r2, [pc, #124]	; (8003318 <HAL_TIM_Base_Start_IT+0xc8>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d018      	beq.n	80032d0 <HAL_TIM_Base_Start_IT+0x80>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a1e      	ldr	r2, [pc, #120]	; (800331c <HAL_TIM_Base_Start_IT+0xcc>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d013      	beq.n	80032d0 <HAL_TIM_Base_Start_IT+0x80>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a1c      	ldr	r2, [pc, #112]	; (8003320 <HAL_TIM_Base_Start_IT+0xd0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00e      	beq.n	80032d0 <HAL_TIM_Base_Start_IT+0x80>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a1b      	ldr	r2, [pc, #108]	; (8003324 <HAL_TIM_Base_Start_IT+0xd4>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d009      	beq.n	80032d0 <HAL_TIM_Base_Start_IT+0x80>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a19      	ldr	r2, [pc, #100]	; (8003328 <HAL_TIM_Base_Start_IT+0xd8>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d004      	beq.n	80032d0 <HAL_TIM_Base_Start_IT+0x80>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a18      	ldr	r2, [pc, #96]	; (800332c <HAL_TIM_Base_Start_IT+0xdc>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d111      	bne.n	80032f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2b06      	cmp	r3, #6
 80032e0:	d010      	beq.n	8003304 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f042 0201 	orr.w	r2, r2, #1
 80032f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f2:	e007      	b.n	8003304 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0201 	orr.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	40010000 	.word	0x40010000
 8003318:	40000400 	.word	0x40000400
 800331c:	40000800 	.word	0x40000800
 8003320:	40000c00 	.word	0x40000c00
 8003324:	40010400 	.word	0x40010400
 8003328:	40014000 	.word	0x40014000
 800332c:	40001800 	.word	0x40001800

08003330 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d020      	beq.n	8003394 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d01b      	beq.n	8003394 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f06f 0202 	mvn.w	r2, #2
 8003364:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f8d2 	bl	8003524 <HAL_TIM_IC_CaptureCallback>
 8003380:	e005      	b.n	800338e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f8c4 	bl	8003510 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 f8d5 	bl	8003538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	f003 0304 	and.w	r3, r3, #4
 800339a:	2b00      	cmp	r3, #0
 800339c:	d020      	beq.n	80033e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d01b      	beq.n	80033e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f06f 0204 	mvn.w	r2, #4
 80033b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2202      	movs	r2, #2
 80033b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f8ac 	bl	8003524 <HAL_TIM_IC_CaptureCallback>
 80033cc:	e005      	b.n	80033da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f89e 	bl	8003510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 f8af 	bl	8003538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d020      	beq.n	800342c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d01b      	beq.n	800342c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f06f 0208 	mvn.w	r2, #8
 80033fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2204      	movs	r2, #4
 8003402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f886 	bl	8003524 <HAL_TIM_IC_CaptureCallback>
 8003418:	e005      	b.n	8003426 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f878 	bl	8003510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f889 	bl	8003538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f003 0310 	and.w	r3, r3, #16
 8003432:	2b00      	cmp	r3, #0
 8003434:	d020      	beq.n	8003478 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f003 0310 	and.w	r3, r3, #16
 800343c:	2b00      	cmp	r3, #0
 800343e:	d01b      	beq.n	8003478 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f06f 0210 	mvn.w	r2, #16
 8003448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2208      	movs	r2, #8
 800344e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f860 	bl	8003524 <HAL_TIM_IC_CaptureCallback>
 8003464:	e005      	b.n	8003472 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f852 	bl	8003510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f863 	bl	8003538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00c      	beq.n	800349c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b00      	cmp	r3, #0
 800348a:	d007      	beq.n	800349c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f06f 0201 	mvn.w	r2, #1
 8003494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f001 fd80 	bl	8004f9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00c      	beq.n	80034c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d007      	beq.n	80034c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f906 	bl	80036cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00c      	beq.n	80034e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d007      	beq.n	80034e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f834 	bl	800354c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	f003 0320 	and.w	r3, r3, #32
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00c      	beq.n	8003508 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f003 0320 	and.w	r3, r3, #32
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d007      	beq.n	8003508 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f06f 0220 	mvn.w	r2, #32
 8003500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f8d8 	bl	80036b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003508:	bf00      	nop
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a46      	ldr	r2, [pc, #280]	; (800368c <TIM_Base_SetConfig+0x12c>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d013      	beq.n	80035a0 <TIM_Base_SetConfig+0x40>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800357e:	d00f      	beq.n	80035a0 <TIM_Base_SetConfig+0x40>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a43      	ldr	r2, [pc, #268]	; (8003690 <TIM_Base_SetConfig+0x130>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d00b      	beq.n	80035a0 <TIM_Base_SetConfig+0x40>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a42      	ldr	r2, [pc, #264]	; (8003694 <TIM_Base_SetConfig+0x134>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d007      	beq.n	80035a0 <TIM_Base_SetConfig+0x40>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a41      	ldr	r2, [pc, #260]	; (8003698 <TIM_Base_SetConfig+0x138>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d003      	beq.n	80035a0 <TIM_Base_SetConfig+0x40>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a40      	ldr	r2, [pc, #256]	; (800369c <TIM_Base_SetConfig+0x13c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d108      	bne.n	80035b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a35      	ldr	r2, [pc, #212]	; (800368c <TIM_Base_SetConfig+0x12c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d02b      	beq.n	8003612 <TIM_Base_SetConfig+0xb2>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c0:	d027      	beq.n	8003612 <TIM_Base_SetConfig+0xb2>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a32      	ldr	r2, [pc, #200]	; (8003690 <TIM_Base_SetConfig+0x130>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d023      	beq.n	8003612 <TIM_Base_SetConfig+0xb2>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a31      	ldr	r2, [pc, #196]	; (8003694 <TIM_Base_SetConfig+0x134>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d01f      	beq.n	8003612 <TIM_Base_SetConfig+0xb2>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a30      	ldr	r2, [pc, #192]	; (8003698 <TIM_Base_SetConfig+0x138>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d01b      	beq.n	8003612 <TIM_Base_SetConfig+0xb2>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a2f      	ldr	r2, [pc, #188]	; (800369c <TIM_Base_SetConfig+0x13c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d017      	beq.n	8003612 <TIM_Base_SetConfig+0xb2>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a2e      	ldr	r2, [pc, #184]	; (80036a0 <TIM_Base_SetConfig+0x140>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d013      	beq.n	8003612 <TIM_Base_SetConfig+0xb2>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a2d      	ldr	r2, [pc, #180]	; (80036a4 <TIM_Base_SetConfig+0x144>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d00f      	beq.n	8003612 <TIM_Base_SetConfig+0xb2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a2c      	ldr	r2, [pc, #176]	; (80036a8 <TIM_Base_SetConfig+0x148>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d00b      	beq.n	8003612 <TIM_Base_SetConfig+0xb2>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a2b      	ldr	r2, [pc, #172]	; (80036ac <TIM_Base_SetConfig+0x14c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d007      	beq.n	8003612 <TIM_Base_SetConfig+0xb2>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a2a      	ldr	r2, [pc, #168]	; (80036b0 <TIM_Base_SetConfig+0x150>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d003      	beq.n	8003612 <TIM_Base_SetConfig+0xb2>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a29      	ldr	r2, [pc, #164]	; (80036b4 <TIM_Base_SetConfig+0x154>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d108      	bne.n	8003624 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003618:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	4313      	orrs	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	4313      	orrs	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a10      	ldr	r2, [pc, #64]	; (800368c <TIM_Base_SetConfig+0x12c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d003      	beq.n	8003658 <TIM_Base_SetConfig+0xf8>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a12      	ldr	r2, [pc, #72]	; (800369c <TIM_Base_SetConfig+0x13c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d103      	bne.n	8003660 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	691a      	ldr	r2, [r3, #16]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b01      	cmp	r3, #1
 8003670:	d105      	bne.n	800367e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	f023 0201 	bic.w	r2, r3, #1
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	611a      	str	r2, [r3, #16]
  }
}
 800367e:	bf00      	nop
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	40010000 	.word	0x40010000
 8003690:	40000400 	.word	0x40000400
 8003694:	40000800 	.word	0x40000800
 8003698:	40000c00 	.word	0x40000c00
 800369c:	40010400 	.word	0x40010400
 80036a0:	40014000 	.word	0x40014000
 80036a4:	40014400 	.word	0x40014400
 80036a8:	40014800 	.word	0x40014800
 80036ac:	40001800 	.word	0x40001800
 80036b0:	40001c00 	.word	0x40001c00
 80036b4:	40002000 	.word	0x40002000

080036b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f043 0201 	orr.w	r2, r3, #1
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f023 0201 	bic.w	r2, r3, #1
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800372e:	2300      	movs	r3, #0
 8003730:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	3301      	adds	r3, #1
 8003736:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800373e:	d901      	bls.n	8003744 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e01b      	b.n	800377c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	2b00      	cmp	r3, #0
 800374a:	daf2      	bge.n	8003732 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	019b      	lsls	r3, r3, #6
 8003754:	f043 0220 	orr.w	r2, r3, #32
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	3301      	adds	r3, #1
 8003760:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003768:	d901      	bls.n	800376e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e006      	b.n	800377c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	f003 0320 	and.w	r3, r3, #32
 8003776:	2b20      	cmp	r3, #32
 8003778:	d0f0      	beq.n	800375c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003790:	2300      	movs	r3, #0
 8003792:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	3301      	adds	r3, #1
 8003798:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80037a0:	d901      	bls.n	80037a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e018      	b.n	80037d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	daf2      	bge.n	8003794 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2210      	movs	r2, #16
 80037b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	3301      	adds	r3, #1
 80037bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80037c4:	d901      	bls.n	80037ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e006      	b.n	80037d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	f003 0310 	and.w	r3, r3, #16
 80037d2:	2b10      	cmp	r3, #16
 80037d4:	d0f0      	beq.n	80037b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b08b      	sub	sp, #44	; 0x2c
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	4613      	mov	r3, r2
 80037f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80037fa:	88fb      	ldrh	r3, [r7, #6]
 80037fc:	089b      	lsrs	r3, r3, #2
 80037fe:	b29b      	uxth	r3, r3
 8003800:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003802:	88fb      	ldrh	r3, [r7, #6]
 8003804:	f003 0303 	and.w	r3, r3, #3
 8003808:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800380a:	2300      	movs	r3, #0
 800380c:	623b      	str	r3, [r7, #32]
 800380e:	e014      	b.n	800383a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	601a      	str	r2, [r3, #0]
    pDest++;
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	3301      	adds	r3, #1
 8003820:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	3301      	adds	r3, #1
 8003826:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	3301      	adds	r3, #1
 800382c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	3301      	adds	r3, #1
 8003832:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	3301      	adds	r3, #1
 8003838:	623b      	str	r3, [r7, #32]
 800383a:	6a3a      	ldr	r2, [r7, #32]
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	429a      	cmp	r2, r3
 8003840:	d3e6      	bcc.n	8003810 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003842:	8bfb      	ldrh	r3, [r7, #30]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d01e      	beq.n	8003886 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003852:	461a      	mov	r2, r3
 8003854:	f107 0310 	add.w	r3, r7, #16
 8003858:	6812      	ldr	r2, [r2, #0]
 800385a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	b2db      	uxtb	r3, r3
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	fa22 f303 	lsr.w	r3, r2, r3
 8003868:	b2da      	uxtb	r2, r3
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	701a      	strb	r2, [r3, #0]
      i++;
 800386e:	6a3b      	ldr	r3, [r7, #32]
 8003870:	3301      	adds	r3, #1
 8003872:	623b      	str	r3, [r7, #32]
      pDest++;
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	3301      	adds	r3, #1
 8003878:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800387a:	8bfb      	ldrh	r3, [r7, #30]
 800387c:	3b01      	subs	r3, #1
 800387e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003880:	8bfb      	ldrh	r3, [r7, #30]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1ea      	bne.n	800385c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003888:	4618      	mov	r0, r3
 800388a:	372c      	adds	r7, #44	; 0x2c
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	4013      	ands	r3, r2
 80038aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80038ac:	68fb      	ldr	r3, [r7, #12]
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b085      	sub	sp, #20
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	460b      	mov	r3, r1
 80038c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80038ca:	78fb      	ldrb	r3, [r7, #3]
 80038cc:	015a      	lsls	r2, r3, #5
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	4413      	add	r3, r2
 80038d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80038da:	78fb      	ldrb	r3, [r7, #3]
 80038dc:	015a      	lsls	r2, r3, #5
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	4413      	add	r3, r2
 80038e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	4013      	ands	r3, r2
 80038ec:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80038ee:	68bb      	ldr	r3, [r7, #8]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	f003 0301 	and.w	r3, r3, #1
}
 800390c:	4618      	mov	r0, r3
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003936:	f023 0303 	bic.w	r3, r3, #3
 800393a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	78fb      	ldrb	r3, [r7, #3]
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	68f9      	ldr	r1, [r7, #12]
 800394c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003950:	4313      	orrs	r3, r2
 8003952:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8003954:	78fb      	ldrb	r3, [r7, #3]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d107      	bne.n	800396a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003960:	461a      	mov	r2, r3
 8003962:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003966:	6053      	str	r3, [r2, #4]
 8003968:	e00c      	b.n	8003984 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800396a:	78fb      	ldrb	r3, [r7, #3]
 800396c:	2b02      	cmp	r3, #2
 800396e:	d107      	bne.n	8003980 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003976:	461a      	mov	r2, r3
 8003978:	f241 7370 	movw	r3, #6000	; 0x1770
 800397c:	6053      	str	r3, [r2, #4]
 800397e:	e001      	b.n	8003984 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e000      	b.n	8003986 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8003992:	b480      	push	{r7}
 8003994:	b085      	sub	sp, #20
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	b29b      	uxth	r3, r3
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b089      	sub	sp, #36	; 0x24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	460b      	mov	r3, r1
 80039be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80039c4:	78fb      	ldrb	r3, [r7, #3]
 80039c6:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	0c9b      	lsrs	r3, r3, #18
 80039dc:	f003 0303 	and.w	r3, r3, #3
 80039e0:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	015a      	lsls	r2, r3, #5
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	4413      	add	r3, r2
 80039ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	0fdb      	lsrs	r3, r3, #31
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	0fdb      	lsrs	r3, r3, #31
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 0320 	and.w	r3, r3, #32
 8003a16:	2b20      	cmp	r3, #32
 8003a18:	d10d      	bne.n	8003a36 <USB_HC_Halt+0x82>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10a      	bne.n	8003a36 <USB_HC_Halt+0x82>
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d005      	beq.n	8003a32 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d002      	beq.n	8003a32 <USB_HC_Halt+0x7e>
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	2b03      	cmp	r3, #3
 8003a30:	d101      	bne.n	8003a36 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8003a32:	2300      	movs	r3, #0
 8003a34:	e0d8      	b.n	8003be8 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d002      	beq.n	8003a42 <USB_HC_Halt+0x8e>
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d173      	bne.n	8003b2a <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	015a      	lsls	r2, r3, #5
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	0151      	lsls	r1, r2, #5
 8003a54:	69fa      	ldr	r2, [r7, #28]
 8003a56:	440a      	add	r2, r1
 8003a58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a60:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 0320 	and.w	r3, r3, #32
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d14a      	bne.n	8003b04 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a72:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d133      	bne.n	8003ae2 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	015a      	lsls	r2, r3, #5
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	4413      	add	r3, r2
 8003a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	0151      	lsls	r1, r2, #5
 8003a8c:	69fa      	ldr	r2, [r7, #28]
 8003a8e:	440a      	add	r2, r1
 8003a90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a98:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	015a      	lsls	r2, r3, #5
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	0151      	lsls	r1, r2, #5
 8003aac:	69fa      	ldr	r2, [r7, #28]
 8003aae:	440a      	add	r2, r1
 8003ab0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ab4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ab8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	3301      	adds	r3, #1
 8003abe:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ac6:	d82e      	bhi.n	8003b26 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	015a      	lsls	r2, r3, #5
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	4413      	add	r3, r2
 8003ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ada:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ade:	d0ec      	beq.n	8003aba <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003ae0:	e081      	b.n	8003be6 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	015a      	lsls	r2, r3, #5
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	4413      	add	r3, r2
 8003aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	0151      	lsls	r1, r2, #5
 8003af4:	69fa      	ldr	r2, [r7, #28]
 8003af6:	440a      	add	r2, r1
 8003af8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003afc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b00:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003b02:	e070      	b.n	8003be6 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	015a      	lsls	r2, r3, #5
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	0151      	lsls	r1, r2, #5
 8003b16:	69fa      	ldr	r2, [r7, #28]
 8003b18:	440a      	add	r2, r1
 8003b1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b22:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003b24:	e05f      	b.n	8003be6 <USB_HC_Halt+0x232>
            break;
 8003b26:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003b28:	e05d      	b.n	8003be6 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	015a      	lsls	r2, r3, #5
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	0151      	lsls	r1, r2, #5
 8003b3c:	69fa      	ldr	r2, [r7, #28]
 8003b3e:	440a      	add	r2, r1
 8003b40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b48:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d133      	bne.n	8003bc2 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	015a      	lsls	r2, r3, #5
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	4413      	add	r3, r2
 8003b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	0151      	lsls	r1, r2, #5
 8003b6c:	69fa      	ldr	r2, [r7, #28]
 8003b6e:	440a      	add	r2, r1
 8003b70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b78:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	015a      	lsls	r2, r3, #5
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	4413      	add	r3, r2
 8003b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	0151      	lsls	r1, r2, #5
 8003b8c:	69fa      	ldr	r2, [r7, #28]
 8003b8e:	440a      	add	r2, r1
 8003b90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b98:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ba6:	d81d      	bhi.n	8003be4 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bbe:	d0ec      	beq.n	8003b9a <USB_HC_Halt+0x1e6>
 8003bc0:	e011      	b.n	8003be6 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	015a      	lsls	r2, r3, #5
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	0151      	lsls	r1, r2, #5
 8003bd4:	69fa      	ldr	r2, [r7, #28]
 8003bd6:	440a      	add	r2, r1
 8003bd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003be0:	6013      	str	r3, [r2, #0]
 8003be2:	e000      	b.n	8003be6 <USB_HC_Halt+0x232>
          break;
 8003be4:	bf00      	nop
    }
  }

  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3724      	adds	r7, #36	; 0x24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b088      	sub	sp, #32
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8003c04:	2300      	movs	r3, #0
 8003c06:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f7ff fd7a 	bl	8003702 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003c0e:	2110      	movs	r1, #16
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7ff fd87 	bl	8003724 <USB_FlushTxFifo>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f7ff fdb1 	bl	8003788 <USB_FlushRxFifo>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8003c30:	2300      	movs	r3, #0
 8003c32:	61bb      	str	r3, [r7, #24]
 8003c34:	e01f      	b.n	8003c76 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	015a      	lsls	r2, r3, #5
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c4c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c54:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003c5c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	3301      	adds	r3, #1
 8003c74:	61bb      	str	r3, [r7, #24]
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	2b0f      	cmp	r3, #15
 8003c7a:	d9dc      	bls.n	8003c36 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	61bb      	str	r3, [r7, #24]
 8003c80:	e034      	b.n	8003cec <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	015a      	lsls	r2, r3, #5
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	4413      	add	r3, r2
 8003c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c98:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ca0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ca8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cc8:	d80c      	bhi.n	8003ce4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	015a      	lsls	r2, r3, #5
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ce0:	d0ec      	beq.n	8003cbc <USB_StopHost+0xc8>
 8003ce2:	e000      	b.n	8003ce6 <USB_StopHost+0xf2>
        break;
 8003ce4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	61bb      	str	r3, [r7, #24]
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	2b0f      	cmp	r3, #15
 8003cf0:	d9c7      	bls.n	8003c82 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cfe:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d06:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7ff fce9 	bl	80036e0 <USB_EnableGlobalInt>

  return ret;
 8003d0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3720      	adds	r7, #32
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f804 	bl	8003d3c <USBH_HandleSof>
}
 8003d34:	bf00      	nop
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b0b      	cmp	r3, #11
 8003d4c:	d10a      	bne.n	8003d64 <USBH_HandleSof+0x28>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d005      	beq.n	8003d64 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	4798      	blx	r3
  }
}
 8003d64:	bf00      	nop
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8003d90:	2200      	movs	r2, #0
 8003d92:	4619      	mov	r1, r3
 8003d94:	f000 f8ae 	bl	8003ef4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8003d98:	bf00      	nop
}
 8003d9a:	3708      	adds	r7, #8
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8003db0:	bf00      	nop
}
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8003df0:	2200      	movs	r2, #0
 8003df2:	4619      	mov	r1, r3
 8003df4:	f000 f87e 	bl	8003ef4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b082      	sub	sp, #8
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f001 fad1 	bl	80053ca <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	791b      	ldrb	r3, [r3, #4]
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f830 	bl	8003e94 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	795b      	ldrb	r3, [r3, #5]
 8003e38:	4619      	mov	r1, r3
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f82a 	bl	8003e94 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8003e54:	2200      	movs	r2, #0
 8003e56:	4619      	mov	r1, r3
 8003e58:	f000 f84c 	bl	8003ef4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b082      	sub	sp, #8
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8003e82:	2200      	movs	r2, #0
 8003e84:	4619      	mov	r1, r3
 8003e86:	f000 f835 	bl	8003ef4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8003ea0:	78fb      	ldrb	r3, [r7, #3]
 8003ea2:	2b0f      	cmp	r3, #15
 8003ea4:	d80d      	bhi.n	8003ec2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8003ea6:	78fb      	ldrb	r3, [r7, #3]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	33e0      	adds	r3, #224	; 0xe0
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4413      	add	r3, r2
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	78fb      	ldrb	r3, [r7, #3]
 8003eb4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8003eb8:	6879      	ldr	r1, [r7, #4]
 8003eba:	33e0      	adds	r3, #224	; 0xe0
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	440b      	add	r3, r1
 8003ec0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ed6:	f3ef 8305 	mrs	r3, IPSR
 8003eda:	607b      	str	r3, [r7, #4]
  return(result);
 8003edc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	bf14      	ite	ne
 8003ee2:	2301      	movne	r3, #1
 8003ee4:	2300      	moveq	r3, #0
 8003ee6:	b2db      	uxtb	r3, r3
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8003f00:	2300      	movs	r3, #0
 8003f02:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <osMessagePut+0x1e>
    ticks = 1;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8003f12:	f7ff ffdd 	bl	8003ed0 <inHandlerMode>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d018      	beq.n	8003f4e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8003f1c:	f107 0210 	add.w	r2, r7, #16
 8003f20:	f107 0108 	add.w	r1, r7, #8
 8003f24:	2300      	movs	r3, #0
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 f9aa 	bl	8004280 <xQueueGenericSendFromISR>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d001      	beq.n	8003f36 <osMessagePut+0x42>
      return osErrorOS;
 8003f32:	23ff      	movs	r3, #255	; 0xff
 8003f34:	e018      	b.n	8003f68 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d014      	beq.n	8003f66 <osMessagePut+0x72>
 8003f3c:	4b0c      	ldr	r3, [pc, #48]	; (8003f70 <osMessagePut+0x7c>)
 8003f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	e00b      	b.n	8003f66 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8003f4e:	f107 0108 	add.w	r1, r7, #8
 8003f52:	2300      	movs	r3, #0
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 f894 	bl	8004084 <xQueueGenericSend>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d001      	beq.n	8003f66 <osMessagePut+0x72>
      return osErrorOS;
 8003f62:	23ff      	movs	r3, #255	; 0xff
 8003f64:	e000      	b.n	8003f68 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	e000ed04 	.word	0xe000ed04

08003f74 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	689a      	ldr	r2, [r3, #8]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	1c5a      	adds	r2, r3, #1
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	601a      	str	r2, [r3, #0]
}
 8003fb0:	bf00      	nop
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fd2:	d103      	bne.n	8003fdc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	e00c      	b.n	8003ff6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3308      	adds	r3, #8
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	e002      	b.n	8003fea <vListInsert+0x2e>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d2f6      	bcs.n	8003fe4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	601a      	str	r2, [r3, #0]
}
 8004022:	bf00      	nop
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800402e:	b480      	push	{r7}
 8004030:	b085      	sub	sp, #20
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6892      	ldr	r2, [r2, #8]
 8004044:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	6852      	ldr	r2, [r2, #4]
 800404e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	429a      	cmp	r2, r3
 8004058:	d103      	bne.n	8004062 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	689a      	ldr	r2, [r3, #8]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	1e5a      	subs	r2, r3, #1
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
}
 8004076:	4618      	mov	r0, r3
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
	...

08004084 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b08e      	sub	sp, #56	; 0x38
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
 8004090:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004092:	2300      	movs	r3, #0
 8004094:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800409a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10a      	bne.n	80040b6 <xQueueGenericSend+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80040a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a4:	f383 8811 	msr	BASEPRI, r3
 80040a8:	f3bf 8f6f 	isb	sy
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	62bb      	str	r3, [r7, #40]	; 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80040b2:	bf00      	nop
 80040b4:	e7fe      	b.n	80040b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d103      	bne.n	80040c4 <xQueueGenericSend+0x40>
 80040bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <xQueueGenericSend+0x44>
 80040c4:	2301      	movs	r3, #1
 80040c6:	e000      	b.n	80040ca <xQueueGenericSend+0x46>
 80040c8:	2300      	movs	r3, #0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10a      	bne.n	80040e4 <xQueueGenericSend+0x60>
	__asm volatile
 80040ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d2:	f383 8811 	msr	BASEPRI, r3
 80040d6:	f3bf 8f6f 	isb	sy
 80040da:	f3bf 8f4f 	dsb	sy
 80040de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80040e0:	bf00      	nop
 80040e2:	e7fe      	b.n	80040e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d103      	bne.n	80040f2 <xQueueGenericSend+0x6e>
 80040ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d101      	bne.n	80040f6 <xQueueGenericSend+0x72>
 80040f2:	2301      	movs	r3, #1
 80040f4:	e000      	b.n	80040f8 <xQueueGenericSend+0x74>
 80040f6:	2300      	movs	r3, #0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10a      	bne.n	8004112 <xQueueGenericSend+0x8e>
	__asm volatile
 80040fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004100:	f383 8811 	msr	BASEPRI, r3
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	623b      	str	r3, [r7, #32]
}
 800410e:	bf00      	nop
 8004110:	e7fe      	b.n	8004110 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004112:	f000 fd31 	bl	8004b78 <xTaskGetSchedulerState>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d102      	bne.n	8004122 <xQueueGenericSend+0x9e>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <xQueueGenericSend+0xa2>
 8004122:	2301      	movs	r3, #1
 8004124:	e000      	b.n	8004128 <xQueueGenericSend+0xa4>
 8004126:	2300      	movs	r3, #0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10a      	bne.n	8004142 <xQueueGenericSend+0xbe>
	__asm volatile
 800412c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004130:	f383 8811 	msr	BASEPRI, r3
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	61fb      	str	r3, [r7, #28]
}
 800413e:	bf00      	nop
 8004140:	e7fe      	b.n	8004140 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004142:	f000 fe39 	bl	8004db8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800414a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414e:	429a      	cmp	r2, r3
 8004150:	d302      	bcc.n	8004158 <xQueueGenericSend+0xd4>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b02      	cmp	r3, #2
 8004156:	d129      	bne.n	80041ac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	68b9      	ldr	r1, [r7, #8]
 800415c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800415e:	f000 f92a 	bl	80043b6 <prvCopyDataToQueue>
 8004162:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	2b00      	cmp	r3, #0
 800416a:	d010      	beq.n	800418e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800416c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416e:	3324      	adds	r3, #36	; 0x24
 8004170:	4618      	mov	r0, r3
 8004172:	f000 fbfb 	bl	800496c <xTaskRemoveFromEventList>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d013      	beq.n	80041a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800417c:	4b3f      	ldr	r3, [pc, #252]	; (800427c <xQueueGenericSend+0x1f8>)
 800417e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	f3bf 8f4f 	dsb	sy
 8004188:	f3bf 8f6f 	isb	sy
 800418c:	e00a      	b.n	80041a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800418e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004190:	2b00      	cmp	r3, #0
 8004192:	d007      	beq.n	80041a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004194:	4b39      	ldr	r3, [pc, #228]	; (800427c <xQueueGenericSend+0x1f8>)
 8004196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80041a4:	f000 fe38 	bl	8004e18 <vPortExitCritical>
				return pdPASS;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e063      	b.n	8004274 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d103      	bne.n	80041ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80041b2:	f000 fe31 	bl	8004e18 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80041b6:	2300      	movs	r3, #0
 80041b8:	e05c      	b.n	8004274 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d106      	bne.n	80041ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041c0:	f107 0314 	add.w	r3, r7, #20
 80041c4:	4618      	mov	r0, r3
 80041c6:	f000 fc33 	bl	8004a30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041ca:	2301      	movs	r3, #1
 80041cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041ce:	f000 fe23 	bl	8004e18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041d2:	f000 f9c5 	bl	8004560 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041d6:	f000 fdef 	bl	8004db8 <vPortEnterCritical>
 80041da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041e0:	b25b      	sxtb	r3, r3
 80041e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041e6:	d103      	bne.n	80041f0 <xQueueGenericSend+0x16c>
 80041e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041f6:	b25b      	sxtb	r3, r3
 80041f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041fc:	d103      	bne.n	8004206 <xQueueGenericSend+0x182>
 80041fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004206:	f000 fe07 	bl	8004e18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800420a:	1d3a      	adds	r2, r7, #4
 800420c:	f107 0314 	add.w	r3, r7, #20
 8004210:	4611      	mov	r1, r2
 8004212:	4618      	mov	r0, r3
 8004214:	f000 fc22 	bl	8004a5c <xTaskCheckForTimeOut>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d124      	bne.n	8004268 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800421e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004220:	f000 f985 	bl	800452e <prvIsQueueFull>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d018      	beq.n	800425c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800422a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422c:	3310      	adds	r3, #16
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	4611      	mov	r1, r2
 8004232:	4618      	mov	r0, r3
 8004234:	f000 fb76 	bl	8004924 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004238:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800423a:	f000 f926 	bl	800448a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800423e:	f000 f99d 	bl	800457c <xTaskResumeAll>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	f47f af7c 	bne.w	8004142 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800424a:	4b0c      	ldr	r3, [pc, #48]	; (800427c <xQueueGenericSend+0x1f8>)
 800424c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	f3bf 8f4f 	dsb	sy
 8004256:	f3bf 8f6f 	isb	sy
 800425a:	e772      	b.n	8004142 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800425c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800425e:	f000 f914 	bl	800448a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004262:	f000 f98b 	bl	800457c <xTaskResumeAll>
 8004266:	e76c      	b.n	8004142 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004268:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800426a:	f000 f90e 	bl	800448a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800426e:	f000 f985 	bl	800457c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004272:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004274:	4618      	mov	r0, r3
 8004276:	3738      	adds	r7, #56	; 0x38
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	e000ed04 	.word	0xe000ed04

08004280 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b090      	sub	sp, #64	; 0x40
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
 800428c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10a      	bne.n	80042ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429c:	f383 8811 	msr	BASEPRI, r3
 80042a0:	f3bf 8f6f 	isb	sy
 80042a4:	f3bf 8f4f 	dsb	sy
 80042a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80042aa:	bf00      	nop
 80042ac:	e7fe      	b.n	80042ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d103      	bne.n	80042bc <xQueueGenericSendFromISR+0x3c>
 80042b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d101      	bne.n	80042c0 <xQueueGenericSendFromISR+0x40>
 80042bc:	2301      	movs	r3, #1
 80042be:	e000      	b.n	80042c2 <xQueueGenericSendFromISR+0x42>
 80042c0:	2300      	movs	r3, #0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10a      	bne.n	80042dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80042c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ca:	f383 8811 	msr	BASEPRI, r3
 80042ce:	f3bf 8f6f 	isb	sy
 80042d2:	f3bf 8f4f 	dsb	sy
 80042d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80042d8:	bf00      	nop
 80042da:	e7fe      	b.n	80042da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d103      	bne.n	80042ea <xQueueGenericSendFromISR+0x6a>
 80042e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d101      	bne.n	80042ee <xQueueGenericSendFromISR+0x6e>
 80042ea:	2301      	movs	r3, #1
 80042ec:	e000      	b.n	80042f0 <xQueueGenericSendFromISR+0x70>
 80042ee:	2300      	movs	r3, #0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10a      	bne.n	800430a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80042f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f8:	f383 8811 	msr	BASEPRI, r3
 80042fc:	f3bf 8f6f 	isb	sy
 8004300:	f3bf 8f4f 	dsb	sy
 8004304:	623b      	str	r3, [r7, #32]
}
 8004306:	bf00      	nop
 8004308:	e7fe      	b.n	8004308 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800430a:	f000 fde5 	bl	8004ed8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800430e:	f3ef 8211 	mrs	r2, BASEPRI
 8004312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004316:	f383 8811 	msr	BASEPRI, r3
 800431a:	f3bf 8f6f 	isb	sy
 800431e:	f3bf 8f4f 	dsb	sy
 8004322:	61fa      	str	r2, [r7, #28]
 8004324:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004326:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004328:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800432a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800432c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800432e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004332:	429a      	cmp	r2, r3
 8004334:	d302      	bcc.n	800433c <xQueueGenericSendFromISR+0xbc>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b02      	cmp	r3, #2
 800433a:	d12f      	bne.n	800439c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800433c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	68b9      	ldr	r1, [r7, #8]
 8004350:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004352:	f000 f830 	bl	80043b6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004356:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800435a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800435e:	d112      	bne.n	8004386 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004364:	2b00      	cmp	r3, #0
 8004366:	d016      	beq.n	8004396 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800436a:	3324      	adds	r3, #36	; 0x24
 800436c:	4618      	mov	r0, r3
 800436e:	f000 fafd 	bl	800496c <xTaskRemoveFromEventList>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00e      	beq.n	8004396 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00b      	beq.n	8004396 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	e007      	b.n	8004396 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004386:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800438a:	3301      	adds	r3, #1
 800438c:	b2db      	uxtb	r3, r3
 800438e:	b25a      	sxtb	r2, r3
 8004390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004392:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004396:	2301      	movs	r3, #1
 8004398:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800439a:	e001      	b.n	80043a0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800439c:	2300      	movs	r3, #0
 800439e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043a2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80043aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80043ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3740      	adds	r7, #64	; 0x40
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b086      	sub	sp, #24
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	60f8      	str	r0, [r7, #12]
 80043be:	60b9      	str	r1, [r7, #8]
 80043c0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80043c2:	2300      	movs	r3, #0
 80043c4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ca:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10d      	bne.n	80043f0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d14d      	bne.n	8004478 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f000 fbe7 	bl	8004bb4 <xTaskPriorityDisinherit>
 80043e6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	609a      	str	r2, [r3, #8]
 80043ee:	e043      	b.n	8004478 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d119      	bne.n	800442a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6858      	ldr	r0, [r3, #4]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	461a      	mov	r2, r3
 8004400:	68b9      	ldr	r1, [r7, #8]
 8004402:	f001 f84d 	bl	80054a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	441a      	add	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	429a      	cmp	r2, r3
 800441e:	d32b      	bcc.n	8004478 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	605a      	str	r2, [r3, #4]
 8004428:	e026      	b.n	8004478 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	68d8      	ldr	r0, [r3, #12]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	461a      	mov	r2, r3
 8004434:	68b9      	ldr	r1, [r7, #8]
 8004436:	f001 f833 	bl	80054a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	68da      	ldr	r2, [r3, #12]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	425b      	negs	r3, r3
 8004444:	441a      	add	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	68da      	ldr	r2, [r3, #12]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d207      	bcs.n	8004466 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	689a      	ldr	r2, [r3, #8]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	425b      	negs	r3, r3
 8004460:	441a      	add	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b02      	cmp	r3, #2
 800446a:	d105      	bne.n	8004478 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d002      	beq.n	8004478 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	3b01      	subs	r3, #1
 8004476:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004480:	697b      	ldr	r3, [r7, #20]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b084      	sub	sp, #16
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004492:	f000 fc91 	bl	8004db8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800449c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800449e:	e011      	b.n	80044c4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d012      	beq.n	80044ce <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3324      	adds	r3, #36	; 0x24
 80044ac:	4618      	mov	r0, r3
 80044ae:	f000 fa5d 	bl	800496c <xTaskRemoveFromEventList>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80044b8:	f000 fb32 	bl	8004b20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
 80044be:	3b01      	subs	r3, #1
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80044c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	dce9      	bgt.n	80044a0 <prvUnlockQueue+0x16>
 80044cc:	e000      	b.n	80044d0 <prvUnlockQueue+0x46>
					break;
 80044ce:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	22ff      	movs	r2, #255	; 0xff
 80044d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80044d8:	f000 fc9e 	bl	8004e18 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80044dc:	f000 fc6c 	bl	8004db8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044e6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80044e8:	e011      	b.n	800450e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d012      	beq.n	8004518 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	3310      	adds	r3, #16
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 fa38 	bl	800496c <xTaskRemoveFromEventList>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004502:	f000 fb0d 	bl	8004b20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004506:	7bbb      	ldrb	r3, [r7, #14]
 8004508:	3b01      	subs	r3, #1
 800450a:	b2db      	uxtb	r3, r3
 800450c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800450e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004512:	2b00      	cmp	r3, #0
 8004514:	dce9      	bgt.n	80044ea <prvUnlockQueue+0x60>
 8004516:	e000      	b.n	800451a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004518:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	22ff      	movs	r2, #255	; 0xff
 800451e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004522:	f000 fc79 	bl	8004e18 <vPortExitCritical>
}
 8004526:	bf00      	nop
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b084      	sub	sp, #16
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004536:	f000 fc3f 	bl	8004db8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004542:	429a      	cmp	r2, r3
 8004544:	d102      	bne.n	800454c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004546:	2301      	movs	r3, #1
 8004548:	60fb      	str	r3, [r7, #12]
 800454a:	e001      	b.n	8004550 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800454c:	2300      	movs	r3, #0
 800454e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004550:	f000 fc62 	bl	8004e18 <vPortExitCritical>

	return xReturn;
 8004554:	68fb      	ldr	r3, [r7, #12]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004564:	4b04      	ldr	r3, [pc, #16]	; (8004578 <vTaskSuspendAll+0x18>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	3301      	adds	r3, #1
 800456a:	4a03      	ldr	r2, [pc, #12]	; (8004578 <vTaskSuspendAll+0x18>)
 800456c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800456e:	bf00      	nop
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	20000110 	.word	0x20000110

0800457c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004582:	2300      	movs	r3, #0
 8004584:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004586:	2300      	movs	r3, #0
 8004588:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800458a:	4b41      	ldr	r3, [pc, #260]	; (8004690 <xTaskResumeAll+0x114>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10a      	bne.n	80045a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8004592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004596:	f383 8811 	msr	BASEPRI, r3
 800459a:	f3bf 8f6f 	isb	sy
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	603b      	str	r3, [r7, #0]
}
 80045a4:	bf00      	nop
 80045a6:	e7fe      	b.n	80045a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80045a8:	f000 fc06 	bl	8004db8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80045ac:	4b38      	ldr	r3, [pc, #224]	; (8004690 <xTaskResumeAll+0x114>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3b01      	subs	r3, #1
 80045b2:	4a37      	ldr	r2, [pc, #220]	; (8004690 <xTaskResumeAll+0x114>)
 80045b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045b6:	4b36      	ldr	r3, [pc, #216]	; (8004690 <xTaskResumeAll+0x114>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d161      	bne.n	8004682 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045be:	4b35      	ldr	r3, [pc, #212]	; (8004694 <xTaskResumeAll+0x118>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d05d      	beq.n	8004682 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045c6:	e02e      	b.n	8004626 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045c8:	4b33      	ldr	r3, [pc, #204]	; (8004698 <xTaskResumeAll+0x11c>)
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	3318      	adds	r3, #24
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff fd2a 	bl	800402e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	3304      	adds	r3, #4
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff fd25 	bl	800402e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e8:	2201      	movs	r2, #1
 80045ea:	409a      	lsls	r2, r3
 80045ec:	4b2b      	ldr	r3, [pc, #172]	; (800469c <xTaskResumeAll+0x120>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	4a2a      	ldr	r2, [pc, #168]	; (800469c <xTaskResumeAll+0x120>)
 80045f4:	6013      	str	r3, [r2, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fa:	4613      	mov	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4413      	add	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4a27      	ldr	r2, [pc, #156]	; (80046a0 <xTaskResumeAll+0x124>)
 8004604:	441a      	add	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	3304      	adds	r3, #4
 800460a:	4619      	mov	r1, r3
 800460c:	4610      	mov	r0, r2
 800460e:	f7ff fcb1 	bl	8003f74 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004616:	4b23      	ldr	r3, [pc, #140]	; (80046a4 <xTaskResumeAll+0x128>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461c:	429a      	cmp	r2, r3
 800461e:	d302      	bcc.n	8004626 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004620:	4b21      	ldr	r3, [pc, #132]	; (80046a8 <xTaskResumeAll+0x12c>)
 8004622:	2201      	movs	r2, #1
 8004624:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004626:	4b1c      	ldr	r3, [pc, #112]	; (8004698 <xTaskResumeAll+0x11c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1cc      	bne.n	80045c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004634:	f000 fa80 	bl	8004b38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004638:	4b1c      	ldr	r3, [pc, #112]	; (80046ac <xTaskResumeAll+0x130>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d010      	beq.n	8004666 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004644:	f000 f836 	bl	80046b4 <xTaskIncrementTick>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d002      	beq.n	8004654 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800464e:	4b16      	ldr	r3, [pc, #88]	; (80046a8 <xTaskResumeAll+0x12c>)
 8004650:	2201      	movs	r2, #1
 8004652:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3b01      	subs	r3, #1
 8004658:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1f1      	bne.n	8004644 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004660:	4b12      	ldr	r3, [pc, #72]	; (80046ac <xTaskResumeAll+0x130>)
 8004662:	2200      	movs	r2, #0
 8004664:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004666:	4b10      	ldr	r3, [pc, #64]	; (80046a8 <xTaskResumeAll+0x12c>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d009      	beq.n	8004682 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800466e:	2301      	movs	r3, #1
 8004670:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004672:	4b0f      	ldr	r3, [pc, #60]	; (80046b0 <xTaskResumeAll+0x134>)
 8004674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	f3bf 8f4f 	dsb	sy
 800467e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004682:	f000 fbc9 	bl	8004e18 <vPortExitCritical>

	return xAlreadyYielded;
 8004686:	68bb      	ldr	r3, [r7, #8]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	20000110 	.word	0x20000110
 8004694:	200000f0 	.word	0x200000f0
 8004698:	200000c8 	.word	0x200000c8
 800469c:	200000f8 	.word	0x200000f8
 80046a0:	20000034 	.word	0x20000034
 80046a4:	20000030 	.word	0x20000030
 80046a8:	20000104 	.word	0x20000104
 80046ac:	20000100 	.word	0x20000100
 80046b0:	e000ed04 	.word	0xe000ed04

080046b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80046ba:	2300      	movs	r3, #0
 80046bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046be:	4b4e      	ldr	r3, [pc, #312]	; (80047f8 <xTaskIncrementTick+0x144>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f040 808e 	bne.w	80047e4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80046c8:	4b4c      	ldr	r3, [pc, #304]	; (80047fc <xTaskIncrementTick+0x148>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	3301      	adds	r3, #1
 80046ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80046d0:	4a4a      	ldr	r2, [pc, #296]	; (80047fc <xTaskIncrementTick+0x148>)
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d120      	bne.n	800471e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80046dc:	4b48      	ldr	r3, [pc, #288]	; (8004800 <xTaskIncrementTick+0x14c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <xTaskIncrementTick+0x48>
	__asm volatile
 80046e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ea:	f383 8811 	msr	BASEPRI, r3
 80046ee:	f3bf 8f6f 	isb	sy
 80046f2:	f3bf 8f4f 	dsb	sy
 80046f6:	603b      	str	r3, [r7, #0]
}
 80046f8:	bf00      	nop
 80046fa:	e7fe      	b.n	80046fa <xTaskIncrementTick+0x46>
 80046fc:	4b40      	ldr	r3, [pc, #256]	; (8004800 <xTaskIncrementTick+0x14c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	60fb      	str	r3, [r7, #12]
 8004702:	4b40      	ldr	r3, [pc, #256]	; (8004804 <xTaskIncrementTick+0x150>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a3e      	ldr	r2, [pc, #248]	; (8004800 <xTaskIncrementTick+0x14c>)
 8004708:	6013      	str	r3, [r2, #0]
 800470a:	4a3e      	ldr	r2, [pc, #248]	; (8004804 <xTaskIncrementTick+0x150>)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	4b3d      	ldr	r3, [pc, #244]	; (8004808 <xTaskIncrementTick+0x154>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3301      	adds	r3, #1
 8004716:	4a3c      	ldr	r2, [pc, #240]	; (8004808 <xTaskIncrementTick+0x154>)
 8004718:	6013      	str	r3, [r2, #0]
 800471a:	f000 fa0d 	bl	8004b38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800471e:	4b3b      	ldr	r3, [pc, #236]	; (800480c <xTaskIncrementTick+0x158>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	429a      	cmp	r2, r3
 8004726:	d348      	bcc.n	80047ba <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004728:	4b35      	ldr	r3, [pc, #212]	; (8004800 <xTaskIncrementTick+0x14c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d104      	bne.n	800473c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004732:	4b36      	ldr	r3, [pc, #216]	; (800480c <xTaskIncrementTick+0x158>)
 8004734:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004738:	601a      	str	r2, [r3, #0]
					break;
 800473a:	e03e      	b.n	80047ba <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800473c:	4b30      	ldr	r3, [pc, #192]	; (8004800 <xTaskIncrementTick+0x14c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	429a      	cmp	r2, r3
 8004752:	d203      	bcs.n	800475c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004754:	4a2d      	ldr	r2, [pc, #180]	; (800480c <xTaskIncrementTick+0x158>)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800475a:	e02e      	b.n	80047ba <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	3304      	adds	r3, #4
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff fc64 	bl	800402e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476a:	2b00      	cmp	r3, #0
 800476c:	d004      	beq.n	8004778 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	3318      	adds	r3, #24
 8004772:	4618      	mov	r0, r3
 8004774:	f7ff fc5b 	bl	800402e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477c:	2201      	movs	r2, #1
 800477e:	409a      	lsls	r2, r3
 8004780:	4b23      	ldr	r3, [pc, #140]	; (8004810 <xTaskIncrementTick+0x15c>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4313      	orrs	r3, r2
 8004786:	4a22      	ldr	r2, [pc, #136]	; (8004810 <xTaskIncrementTick+0x15c>)
 8004788:	6013      	str	r3, [r2, #0]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800478e:	4613      	mov	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4413      	add	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4a1f      	ldr	r2, [pc, #124]	; (8004814 <xTaskIncrementTick+0x160>)
 8004798:	441a      	add	r2, r3
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	3304      	adds	r3, #4
 800479e:	4619      	mov	r1, r3
 80047a0:	4610      	mov	r0, r2
 80047a2:	f7ff fbe7 	bl	8003f74 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047aa:	4b1b      	ldr	r3, [pc, #108]	; (8004818 <xTaskIncrementTick+0x164>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d3b9      	bcc.n	8004728 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80047b4:	2301      	movs	r3, #1
 80047b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047b8:	e7b6      	b.n	8004728 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80047ba:	4b17      	ldr	r3, [pc, #92]	; (8004818 <xTaskIncrementTick+0x164>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c0:	4914      	ldr	r1, [pc, #80]	; (8004814 <xTaskIncrementTick+0x160>)
 80047c2:	4613      	mov	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4413      	add	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	440b      	add	r3, r1
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d901      	bls.n	80047d6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80047d2:	2301      	movs	r3, #1
 80047d4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80047d6:	4b11      	ldr	r3, [pc, #68]	; (800481c <xTaskIncrementTick+0x168>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d007      	beq.n	80047ee <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80047de:	2301      	movs	r3, #1
 80047e0:	617b      	str	r3, [r7, #20]
 80047e2:	e004      	b.n	80047ee <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80047e4:	4b0e      	ldr	r3, [pc, #56]	; (8004820 <xTaskIncrementTick+0x16c>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3301      	adds	r3, #1
 80047ea:	4a0d      	ldr	r2, [pc, #52]	; (8004820 <xTaskIncrementTick+0x16c>)
 80047ec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80047ee:	697b      	ldr	r3, [r7, #20]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3718      	adds	r7, #24
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	20000110 	.word	0x20000110
 80047fc:	200000f4 	.word	0x200000f4
 8004800:	200000c0 	.word	0x200000c0
 8004804:	200000c4 	.word	0x200000c4
 8004808:	20000108 	.word	0x20000108
 800480c:	2000010c 	.word	0x2000010c
 8004810:	200000f8 	.word	0x200000f8
 8004814:	20000034 	.word	0x20000034
 8004818:	20000030 	.word	0x20000030
 800481c:	20000104 	.word	0x20000104
 8004820:	20000100 	.word	0x20000100

08004824 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b088      	sub	sp, #32
 8004828:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800482a:	4b39      	ldr	r3, [pc, #228]	; (8004910 <vTaskSwitchContext+0xec>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004832:	4b38      	ldr	r3, [pc, #224]	; (8004914 <vTaskSwitchContext+0xf0>)
 8004834:	2201      	movs	r2, #1
 8004836:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004838:	e066      	b.n	8004908 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 800483a:	4b36      	ldr	r3, [pc, #216]	; (8004914 <vTaskSwitchContext+0xf0>)
 800483c:	2200      	movs	r2, #0
 800483e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8004840:	4b35      	ldr	r3, [pc, #212]	; (8004918 <vTaskSwitchContext+0xf4>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004846:	61fb      	str	r3, [r7, #28]
 8004848:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800484c:	61bb      	str	r3, [r7, #24]
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	429a      	cmp	r2, r3
 8004856:	d111      	bne.n	800487c <vTaskSwitchContext+0x58>
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	3304      	adds	r3, #4
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	69ba      	ldr	r2, [r7, #24]
 8004860:	429a      	cmp	r2, r3
 8004862:	d10b      	bne.n	800487c <vTaskSwitchContext+0x58>
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	3308      	adds	r3, #8
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	429a      	cmp	r2, r3
 800486e:	d105      	bne.n	800487c <vTaskSwitchContext+0x58>
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	330c      	adds	r3, #12
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	429a      	cmp	r2, r3
 800487a:	d008      	beq.n	800488e <vTaskSwitchContext+0x6a>
 800487c:	4b26      	ldr	r3, [pc, #152]	; (8004918 <vTaskSwitchContext+0xf4>)
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	4b25      	ldr	r3, [pc, #148]	; (8004918 <vTaskSwitchContext+0xf4>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3334      	adds	r3, #52	; 0x34
 8004886:	4619      	mov	r1, r3
 8004888:	4610      	mov	r0, r2
 800488a:	f000 fb65 	bl	8004f58 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800488e:	4b23      	ldr	r3, [pc, #140]	; (800491c <vTaskSwitchContext+0xf8>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	fab3 f383 	clz	r3, r3
 800489a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800489c:	7afb      	ldrb	r3, [r7, #11]
 800489e:	f1c3 031f 	rsb	r3, r3, #31
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	491e      	ldr	r1, [pc, #120]	; (8004920 <vTaskSwitchContext+0xfc>)
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	4613      	mov	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	440b      	add	r3, r1
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10a      	bne.n	80048ce <vTaskSwitchContext+0xaa>
	__asm volatile
 80048b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048bc:	f383 8811 	msr	BASEPRI, r3
 80048c0:	f3bf 8f6f 	isb	sy
 80048c4:	f3bf 8f4f 	dsb	sy
 80048c8:	607b      	str	r3, [r7, #4]
}
 80048ca:	bf00      	nop
 80048cc:	e7fe      	b.n	80048cc <vTaskSwitchContext+0xa8>
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	4613      	mov	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4a11      	ldr	r2, [pc, #68]	; (8004920 <vTaskSwitchContext+0xfc>)
 80048da:	4413      	add	r3, r2
 80048dc:	613b      	str	r3, [r7, #16]
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	605a      	str	r2, [r3, #4]
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	3308      	adds	r3, #8
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d104      	bne.n	80048fe <vTaskSwitchContext+0xda>
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	605a      	str	r2, [r3, #4]
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	4a04      	ldr	r2, [pc, #16]	; (8004918 <vTaskSwitchContext+0xf4>)
 8004906:	6013      	str	r3, [r2, #0]
}
 8004908:	bf00      	nop
 800490a:	3720      	adds	r7, #32
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	20000110 	.word	0x20000110
 8004914:	20000104 	.word	0x20000104
 8004918:	20000030 	.word	0x20000030
 800491c:	200000f8 	.word	0x200000f8
 8004920:	20000034 	.word	0x20000034

08004924 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10a      	bne.n	800494a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004938:	f383 8811 	msr	BASEPRI, r3
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	f3bf 8f4f 	dsb	sy
 8004944:	60fb      	str	r3, [r7, #12]
}
 8004946:	bf00      	nop
 8004948:	e7fe      	b.n	8004948 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800494a:	4b07      	ldr	r3, [pc, #28]	; (8004968 <vTaskPlaceOnEventList+0x44>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3318      	adds	r3, #24
 8004950:	4619      	mov	r1, r3
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7ff fb32 	bl	8003fbc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004958:	2101      	movs	r1, #1
 800495a:	6838      	ldr	r0, [r7, #0]
 800495c:	f000 f9b0 	bl	8004cc0 <prvAddCurrentTaskToDelayedList>
}
 8004960:	bf00      	nop
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	20000030 	.word	0x20000030

0800496c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10a      	bne.n	8004998 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	60fb      	str	r3, [r7, #12]
}
 8004994:	bf00      	nop
 8004996:	e7fe      	b.n	8004996 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	3318      	adds	r3, #24
 800499c:	4618      	mov	r0, r3
 800499e:	f7ff fb46 	bl	800402e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049a2:	4b1d      	ldr	r3, [pc, #116]	; (8004a18 <xTaskRemoveFromEventList+0xac>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d11c      	bne.n	80049e4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	3304      	adds	r3, #4
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7ff fb3d 	bl	800402e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b8:	2201      	movs	r2, #1
 80049ba:	409a      	lsls	r2, r3
 80049bc:	4b17      	ldr	r3, [pc, #92]	; (8004a1c <xTaskRemoveFromEventList+0xb0>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	4a16      	ldr	r2, [pc, #88]	; (8004a1c <xTaskRemoveFromEventList+0xb0>)
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ca:	4613      	mov	r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4a13      	ldr	r2, [pc, #76]	; (8004a20 <xTaskRemoveFromEventList+0xb4>)
 80049d4:	441a      	add	r2, r3
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	3304      	adds	r3, #4
 80049da:	4619      	mov	r1, r3
 80049dc:	4610      	mov	r0, r2
 80049de:	f7ff fac9 	bl	8003f74 <vListInsertEnd>
 80049e2:	e005      	b.n	80049f0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	3318      	adds	r3, #24
 80049e8:	4619      	mov	r1, r3
 80049ea:	480e      	ldr	r0, [pc, #56]	; (8004a24 <xTaskRemoveFromEventList+0xb8>)
 80049ec:	f7ff fac2 	bl	8003f74 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f4:	4b0c      	ldr	r3, [pc, #48]	; (8004a28 <xTaskRemoveFromEventList+0xbc>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d905      	bls.n	8004a0a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80049fe:	2301      	movs	r3, #1
 8004a00:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a02:	4b0a      	ldr	r3, [pc, #40]	; (8004a2c <xTaskRemoveFromEventList+0xc0>)
 8004a04:	2201      	movs	r2, #1
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	e001      	b.n	8004a0e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004a0e:	697b      	ldr	r3, [r7, #20]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3718      	adds	r7, #24
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	20000110 	.word	0x20000110
 8004a1c:	200000f8 	.word	0x200000f8
 8004a20:	20000034 	.word	0x20000034
 8004a24:	200000c8 	.word	0x200000c8
 8004a28:	20000030 	.word	0x20000030
 8004a2c:	20000104 	.word	0x20000104

08004a30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a38:	4b06      	ldr	r3, [pc, #24]	; (8004a54 <vTaskInternalSetTimeOutState+0x24>)
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a40:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <vTaskInternalSetTimeOutState+0x28>)
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	605a      	str	r2, [r3, #4]
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	20000108 	.word	0x20000108
 8004a58:	200000f4 	.word	0x200000f4

08004a5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b088      	sub	sp, #32
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10a      	bne.n	8004a82 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a70:	f383 8811 	msr	BASEPRI, r3
 8004a74:	f3bf 8f6f 	isb	sy
 8004a78:	f3bf 8f4f 	dsb	sy
 8004a7c:	613b      	str	r3, [r7, #16]
}
 8004a7e:	bf00      	nop
 8004a80:	e7fe      	b.n	8004a80 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10a      	bne.n	8004a9e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8c:	f383 8811 	msr	BASEPRI, r3
 8004a90:	f3bf 8f6f 	isb	sy
 8004a94:	f3bf 8f4f 	dsb	sy
 8004a98:	60fb      	str	r3, [r7, #12]
}
 8004a9a:	bf00      	nop
 8004a9c:	e7fe      	b.n	8004a9c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004a9e:	f000 f98b 	bl	8004db8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004aa2:	4b1d      	ldr	r3, [pc, #116]	; (8004b18 <xTaskCheckForTimeOut+0xbc>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004aba:	d102      	bne.n	8004ac2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004abc:	2300      	movs	r3, #0
 8004abe:	61fb      	str	r3, [r7, #28]
 8004ac0:	e023      	b.n	8004b0a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	4b15      	ldr	r3, [pc, #84]	; (8004b1c <xTaskCheckForTimeOut+0xc0>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d007      	beq.n	8004ade <xTaskCheckForTimeOut+0x82>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d302      	bcc.n	8004ade <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	61fb      	str	r3, [r7, #28]
 8004adc:	e015      	b.n	8004b0a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d20b      	bcs.n	8004b00 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	1ad2      	subs	r2, r2, r3
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f7ff ff9b 	bl	8004a30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004afa:	2300      	movs	r3, #0
 8004afc:	61fb      	str	r3, [r7, #28]
 8004afe:	e004      	b.n	8004b0a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	2200      	movs	r2, #0
 8004b04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b06:	2301      	movs	r3, #1
 8004b08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b0a:	f000 f985 	bl	8004e18 <vPortExitCritical>

	return xReturn;
 8004b0e:	69fb      	ldr	r3, [r7, #28]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3720      	adds	r7, #32
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	200000f4 	.word	0x200000f4
 8004b1c:	20000108 	.word	0x20000108

08004b20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004b24:	4b03      	ldr	r3, [pc, #12]	; (8004b34 <vTaskMissedYield+0x14>)
 8004b26:	2201      	movs	r2, #1
 8004b28:	601a      	str	r2, [r3, #0]
}
 8004b2a:	bf00      	nop
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr
 8004b34:	20000104 	.word	0x20000104

08004b38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b3e:	4b0c      	ldr	r3, [pc, #48]	; (8004b70 <prvResetNextTaskUnblockTime+0x38>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d104      	bne.n	8004b52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b48:	4b0a      	ldr	r3, [pc, #40]	; (8004b74 <prvResetNextTaskUnblockTime+0x3c>)
 8004b4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b50:	e008      	b.n	8004b64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b52:	4b07      	ldr	r3, [pc, #28]	; (8004b70 <prvResetNextTaskUnblockTime+0x38>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	4a04      	ldr	r2, [pc, #16]	; (8004b74 <prvResetNextTaskUnblockTime+0x3c>)
 8004b62:	6013      	str	r3, [r2, #0]
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	200000c0 	.word	0x200000c0
 8004b74:	2000010c 	.word	0x2000010c

08004b78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b7e:	4b0b      	ldr	r3, [pc, #44]	; (8004bac <xTaskGetSchedulerState+0x34>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d102      	bne.n	8004b8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b86:	2301      	movs	r3, #1
 8004b88:	607b      	str	r3, [r7, #4]
 8004b8a:	e008      	b.n	8004b9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b8c:	4b08      	ldr	r3, [pc, #32]	; (8004bb0 <xTaskGetSchedulerState+0x38>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d102      	bne.n	8004b9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b94:	2302      	movs	r3, #2
 8004b96:	607b      	str	r3, [r7, #4]
 8004b98:	e001      	b.n	8004b9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b9e:	687b      	ldr	r3, [r7, #4]
	}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	200000fc 	.word	0x200000fc
 8004bb0:	20000110 	.word	0x20000110

08004bb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d06e      	beq.n	8004ca8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004bca:	4b3a      	ldr	r3, [pc, #232]	; (8004cb4 <xTaskPriorityDisinherit+0x100>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d00a      	beq.n	8004bea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd8:	f383 8811 	msr	BASEPRI, r3
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	60fb      	str	r3, [r7, #12]
}
 8004be6:	bf00      	nop
 8004be8:	e7fe      	b.n	8004be8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10a      	bne.n	8004c08 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf6:	f383 8811 	msr	BASEPRI, r3
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	60bb      	str	r3, [r7, #8]
}
 8004c04:	bf00      	nop
 8004c06:	e7fe      	b.n	8004c06 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c0c:	1e5a      	subs	r2, r3, #1
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d044      	beq.n	8004ca8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d140      	bne.n	8004ca8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	3304      	adds	r3, #4
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7ff f9ff 	bl	800402e <uxListRemove>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d115      	bne.n	8004c62 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c3a:	491f      	ldr	r1, [pc, #124]	; (8004cb8 <xTaskPriorityDisinherit+0x104>)
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	440b      	add	r3, r1
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10a      	bne.n	8004c62 <xTaskPriorityDisinherit+0xae>
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	2201      	movs	r2, #1
 8004c52:	fa02 f303 	lsl.w	r3, r2, r3
 8004c56:	43da      	mvns	r2, r3
 8004c58:	4b18      	ldr	r3, [pc, #96]	; (8004cbc <xTaskPriorityDisinherit+0x108>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	4a17      	ldr	r2, [pc, #92]	; (8004cbc <xTaskPriorityDisinherit+0x108>)
 8004c60:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6e:	f1c3 0207 	rsb	r2, r3, #7
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	409a      	lsls	r2, r3
 8004c7e:	4b0f      	ldr	r3, [pc, #60]	; (8004cbc <xTaskPriorityDisinherit+0x108>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	4a0d      	ldr	r2, [pc, #52]	; (8004cbc <xTaskPriorityDisinherit+0x108>)
 8004c86:	6013      	str	r3, [r2, #0]
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4413      	add	r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4a08      	ldr	r2, [pc, #32]	; (8004cb8 <xTaskPriorityDisinherit+0x104>)
 8004c96:	441a      	add	r2, r3
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	4610      	mov	r0, r2
 8004ca0:	f7ff f968 	bl	8003f74 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ca8:	697b      	ldr	r3, [r7, #20]
	}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3718      	adds	r7, #24
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	20000030 	.word	0x20000030
 8004cb8:	20000034 	.word	0x20000034
 8004cbc:	200000f8 	.word	0x200000f8

08004cc0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004cca:	4b29      	ldr	r3, [pc, #164]	; (8004d70 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cd0:	4b28      	ldr	r3, [pc, #160]	; (8004d74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	3304      	adds	r3, #4
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7ff f9a9 	bl	800402e <uxListRemove>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10b      	bne.n	8004cfa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004ce2:	4b24      	ldr	r3, [pc, #144]	; (8004d74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce8:	2201      	movs	r2, #1
 8004cea:	fa02 f303 	lsl.w	r3, r2, r3
 8004cee:	43da      	mvns	r2, r3
 8004cf0:	4b21      	ldr	r3, [pc, #132]	; (8004d78 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	4a20      	ldr	r2, [pc, #128]	; (8004d78 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004cf8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d00:	d10a      	bne.n	8004d18 <prvAddCurrentTaskToDelayedList+0x58>
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d007      	beq.n	8004d18 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d08:	4b1a      	ldr	r3, [pc, #104]	; (8004d74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	4619      	mov	r1, r3
 8004d10:	481a      	ldr	r0, [pc, #104]	; (8004d7c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004d12:	f7ff f92f 	bl	8003f74 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d16:	e026      	b.n	8004d66 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d20:	4b14      	ldr	r3, [pc, #80]	; (8004d74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d209      	bcs.n	8004d44 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d30:	4b13      	ldr	r3, [pc, #76]	; (8004d80 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	4b0f      	ldr	r3, [pc, #60]	; (8004d74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	3304      	adds	r3, #4
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	f7ff f93d 	bl	8003fbc <vListInsert>
}
 8004d42:	e010      	b.n	8004d66 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d44:	4b0f      	ldr	r3, [pc, #60]	; (8004d84 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	4b0a      	ldr	r3, [pc, #40]	; (8004d74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3304      	adds	r3, #4
 8004d4e:	4619      	mov	r1, r3
 8004d50:	4610      	mov	r0, r2
 8004d52:	f7ff f933 	bl	8003fbc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d56:	4b0c      	ldr	r3, [pc, #48]	; (8004d88 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d202      	bcs.n	8004d66 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004d60:	4a09      	ldr	r2, [pc, #36]	; (8004d88 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	6013      	str	r3, [r2, #0]
}
 8004d66:	bf00      	nop
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	200000f4 	.word	0x200000f4
 8004d74:	20000030 	.word	0x20000030
 8004d78:	200000f8 	.word	0x200000f8
 8004d7c:	200000dc 	.word	0x200000dc
 8004d80:	200000c4 	.word	0x200000c4
 8004d84:	200000c0 	.word	0x200000c0
 8004d88:	2000010c 	.word	0x2000010c
 8004d8c:	00000000 	.word	0x00000000

08004d90 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d90:	4b07      	ldr	r3, [pc, #28]	; (8004db0 <pxCurrentTCBConst2>)
 8004d92:	6819      	ldr	r1, [r3, #0]
 8004d94:	6808      	ldr	r0, [r1, #0]
 8004d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d9a:	f380 8809 	msr	PSP, r0
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	f04f 0000 	mov.w	r0, #0
 8004da6:	f380 8811 	msr	BASEPRI, r0
 8004daa:	4770      	bx	lr
 8004dac:	f3af 8000 	nop.w

08004db0 <pxCurrentTCBConst2>:
 8004db0:	20000030 	.word	0x20000030
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004db4:	bf00      	nop
 8004db6:	bf00      	nop

08004db8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
	__asm volatile
 8004dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc2:	f383 8811 	msr	BASEPRI, r3
 8004dc6:	f3bf 8f6f 	isb	sy
 8004dca:	f3bf 8f4f 	dsb	sy
 8004dce:	607b      	str	r3, [r7, #4]
}
 8004dd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004dd2:	4b0f      	ldr	r3, [pc, #60]	; (8004e10 <vPortEnterCritical+0x58>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	4a0d      	ldr	r2, [pc, #52]	; (8004e10 <vPortEnterCritical+0x58>)
 8004dda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ddc:	4b0c      	ldr	r3, [pc, #48]	; (8004e10 <vPortEnterCritical+0x58>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d10f      	bne.n	8004e04 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004de4:	4b0b      	ldr	r3, [pc, #44]	; (8004e14 <vPortEnterCritical+0x5c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00a      	beq.n	8004e04 <vPortEnterCritical+0x4c>
	__asm volatile
 8004dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	603b      	str	r3, [r7, #0]
}
 8004e00:	bf00      	nop
 8004e02:	e7fe      	b.n	8004e02 <vPortEnterCritical+0x4a>
	}
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr
 8004e10:	20000008 	.word	0x20000008
 8004e14:	e000ed04 	.word	0xe000ed04

08004e18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e1e:	4b12      	ldr	r3, [pc, #72]	; (8004e68 <vPortExitCritical+0x50>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10a      	bne.n	8004e3c <vPortExitCritical+0x24>
	__asm volatile
 8004e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2a:	f383 8811 	msr	BASEPRI, r3
 8004e2e:	f3bf 8f6f 	isb	sy
 8004e32:	f3bf 8f4f 	dsb	sy
 8004e36:	607b      	str	r3, [r7, #4]
}
 8004e38:	bf00      	nop
 8004e3a:	e7fe      	b.n	8004e3a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e3c:	4b0a      	ldr	r3, [pc, #40]	; (8004e68 <vPortExitCritical+0x50>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	3b01      	subs	r3, #1
 8004e42:	4a09      	ldr	r2, [pc, #36]	; (8004e68 <vPortExitCritical+0x50>)
 8004e44:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e46:	4b08      	ldr	r3, [pc, #32]	; (8004e68 <vPortExitCritical+0x50>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d105      	bne.n	8004e5a <vPortExitCritical+0x42>
 8004e4e:	2300      	movs	r3, #0
 8004e50:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	f383 8811 	msr	BASEPRI, r3
}
 8004e58:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e5a:	bf00      	nop
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	20000008 	.word	0x20000008
 8004e6c:	00000000 	.word	0x00000000

08004e70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e70:	f3ef 8009 	mrs	r0, PSP
 8004e74:	f3bf 8f6f 	isb	sy
 8004e78:	4b15      	ldr	r3, [pc, #84]	; (8004ed0 <pxCurrentTCBConst>)
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	f01e 0f10 	tst.w	lr, #16
 8004e80:	bf08      	it	eq
 8004e82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e8a:	6010      	str	r0, [r2, #0]
 8004e8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e94:	f380 8811 	msr	BASEPRI, r0
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	f3bf 8f6f 	isb	sy
 8004ea0:	f7ff fcc0 	bl	8004824 <vTaskSwitchContext>
 8004ea4:	f04f 0000 	mov.w	r0, #0
 8004ea8:	f380 8811 	msr	BASEPRI, r0
 8004eac:	bc09      	pop	{r0, r3}
 8004eae:	6819      	ldr	r1, [r3, #0]
 8004eb0:	6808      	ldr	r0, [r1, #0]
 8004eb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eb6:	f01e 0f10 	tst.w	lr, #16
 8004eba:	bf08      	it	eq
 8004ebc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ec0:	f380 8809 	msr	PSP, r0
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	f3af 8000 	nop.w

08004ed0 <pxCurrentTCBConst>:
 8004ed0:	20000030 	.word	0x20000030
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ed4:	bf00      	nop
 8004ed6:	bf00      	nop

08004ed8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004ede:	f3ef 8305 	mrs	r3, IPSR
 8004ee2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2b0f      	cmp	r3, #15
 8004ee8:	d914      	bls.n	8004f14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004eea:	4a17      	ldr	r2, [pc, #92]	; (8004f48 <vPortValidateInterruptPriority+0x70>)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4413      	add	r3, r2
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004ef4:	4b15      	ldr	r3, [pc, #84]	; (8004f4c <vPortValidateInterruptPriority+0x74>)
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	7afa      	ldrb	r2, [r7, #11]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d20a      	bcs.n	8004f14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	607b      	str	r3, [r7, #4]
}
 8004f10:	bf00      	nop
 8004f12:	e7fe      	b.n	8004f12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f14:	4b0e      	ldr	r3, [pc, #56]	; (8004f50 <vPortValidateInterruptPriority+0x78>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f1c:	4b0d      	ldr	r3, [pc, #52]	; (8004f54 <vPortValidateInterruptPriority+0x7c>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d90a      	bls.n	8004f3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f28:	f383 8811 	msr	BASEPRI, r3
 8004f2c:	f3bf 8f6f 	isb	sy
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	603b      	str	r3, [r7, #0]
}
 8004f36:	bf00      	nop
 8004f38:	e7fe      	b.n	8004f38 <vPortValidateInterruptPriority+0x60>
	}
 8004f3a:	bf00      	nop
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	e000e3f0 	.word	0xe000e3f0
 8004f4c:	20000114 	.word	0x20000114
 8004f50:	e000ed0c 	.word	0xe000ed0c
 8004f54:	20000118 	.word	0x20000118

08004f58 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
	...

08004f70 <main>:
// Private Variables
DMA2D_HandleTypeDef hdma2d; // maybe this should be extern if defined elsewhere?


int main(void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	af00      	add	r7, sp, #0
	// HAL is initialized first typically
	HAL_Init(); // check result
 8004f74:	f7fb faba 	bl	80004ec <HAL_Init>
	// also calls the HAL_SysTick_Config function when configures the SysTick registers, priority, clock source, enables the interrupt and starts the counter
	// HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK); // didn't see this called in the boilerplate
	// HAL_SYSTICK_EnableIRQ(); // undefined reference
	// HAL_NVIC_EnableIRQ(SysTick_IRQn); // SysTick is enabled via CMSIS SysTick_Config()

	SystemClock_Config();
 8004f78:	f000 f822 	bl	8004fc0 <SystemClock_Config>

	// Reconfigure the SysTick interrupt priority to be safe
	// HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);

	/* Initialize all configured peripherals */
	GPIO_Init();
 8004f7c:	f000 f85a 	bl	8005034 <GPIO_Init>
	USART1_UART_Init();
 8004f80:	f000 f886 	bl	8005090 <USART1_UART_Init>

    /* Loop forever */
	while(1) {
		HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8004f84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f88:	4803      	ldr	r0, [pc, #12]	; (8004f98 <main+0x28>)
 8004f8a:	f7fb feb3 	bl	8000cf4 <HAL_GPIO_TogglePin>
		// TODO - need to figure out how to configure timer, LED blinks with bp
		HAL_Delay(500);
 8004f8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004f92:	f7fb faed 	bl	8000570 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8004f96:	e7f5      	b.n	8004f84 <main+0x14>
 8004f98:	40021800 	.word	0x40021800

08004f9c <HAL_TIM_PeriodElapsedCallback>:
//void SysTick_Handler(void) {
//	HAL_IncTick();
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a04      	ldr	r2, [pc, #16]	; (8004fbc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d101      	bne.n	8004fb2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004fae:	f7fb fabf 	bl	8000530 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004fb2:	bf00      	nop
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	40001000 	.word	0x40001000

08004fc0 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b092      	sub	sp, #72	; 0x48
 8004fc4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	/* Configure the main PLL */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004fce:	2310      	movs	r3, #16
 8004fd0:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLM = 8;
 8004fda:	2308      	movs	r3, #8
 8004fdc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN = 100;
 8004fde:	2364      	movs	r3, #100	; 0x64
 8004fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8004fe6:	2304      	movs	r3, #4
 8004fe8:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004fea:	f107 0318 	add.w	r3, r7, #24
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7fd fc28 	bl	8002844 <HAL_RCC_OscConfig>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <SystemClock_Config+0x3e>
	{
		Error_Handler();
 8004ffa:	f000 f850 	bl	800509e <Error_Handler>
	}

	/* Configure the CPU, AHB, and APB clocks */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ffe:	230f      	movs	r3, #15
 8005000:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005002:	2302      	movs	r3, #2
 8005004:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005006:	2300      	movs	r3, #0
 8005008:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800500a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800500e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005014:	617b      	str	r3, [r7, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005016:	1d3b      	adds	r3, r7, #4
 8005018:	2103      	movs	r1, #3
 800501a:	4618      	mov	r0, r3
 800501c:	f7fd fe8a 	bl	8002d34 <HAL_RCC_ClockConfig>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d001      	beq.n	800502a <SystemClock_Config+0x6a>
	{
		Error_Handler();
 8005026:	f000 f83a 	bl	800509e <Error_Handler>
	}


}
 800502a:	bf00      	nop
 800502c:	3748      	adds	r7, #72	; 0x48
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
	...

08005034 <GPIO_Init>:
  {
    Error_Handler();
  }
}

void GPIO_Init(void) {
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800503a:	1d3b      	adds	r3, r7, #4
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	605a      	str	r2, [r3, #4]
 8005042:	609a      	str	r2, [r3, #8]
 8005044:	60da      	str	r2, [r3, #12]
 8005046:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOG_CLK_ENABLE();
 8005048:	2300      	movs	r3, #0
 800504a:	603b      	str	r3, [r7, #0]
 800504c:	4b0e      	ldr	r3, [pc, #56]	; (8005088 <GPIO_Init+0x54>)
 800504e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005050:	4a0d      	ldr	r2, [pc, #52]	; (8005088 <GPIO_Init+0x54>)
 8005052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005056:	6313      	str	r3, [r2, #48]	; 0x30
 8005058:	4b0b      	ldr	r3, [pc, #44]	; (8005088 <GPIO_Init+0x54>)
 800505a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005060:	603b      	str	r3, [r7, #0]
 8005062:	683b      	ldr	r3, [r7, #0]

	  /*Configure GPIO pins :*/
	  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005064:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005068:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800506a:	2301      	movs	r3, #1
 800506c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800506e:	2300      	movs	r3, #0
 8005070:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005072:	2300      	movs	r3, #0
 8005074:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005076:	1d3b      	adds	r3, r7, #4
 8005078:	4619      	mov	r1, r3
 800507a:	4804      	ldr	r0, [pc, #16]	; (800508c <GPIO_Init+0x58>)
 800507c:	f7fb fc8e 	bl	800099c <HAL_GPIO_Init>

}
 8005080:	bf00      	nop
 8005082:	3718      	adds	r7, #24
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	40023800 	.word	0x40023800
 800508c:	40021800 	.word	0x40021800

08005090 <USART1_UART_Init>:

void USART1_UART_Init(void) {
 8005090:	b480      	push	{r7}
 8005092:	af00      	add	r7, sp, #0
	// TODO
}
 8005094:	bf00      	nop
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr

0800509e <Error_Handler>:

void Error_Handler(void)
{
 800509e:	b480      	push	{r7}
 80050a0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80050a2:	b672      	cpsid	i
}
 80050a4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80050a6:	e7fe      	b.n	80050a6 <Error_Handler+0x8>

080050a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050ae:	2300      	movs	r3, #0
 80050b0:	607b      	str	r3, [r7, #4]
 80050b2:	4b12      	ldr	r3, [pc, #72]	; (80050fc <HAL_MspInit+0x54>)
 80050b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b6:	4a11      	ldr	r2, [pc, #68]	; (80050fc <HAL_MspInit+0x54>)
 80050b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050bc:	6453      	str	r3, [r2, #68]	; 0x44
 80050be:	4b0f      	ldr	r3, [pc, #60]	; (80050fc <HAL_MspInit+0x54>)
 80050c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050c6:	607b      	str	r3, [r7, #4]
 80050c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80050ca:	2300      	movs	r3, #0
 80050cc:	603b      	str	r3, [r7, #0]
 80050ce:	4b0b      	ldr	r3, [pc, #44]	; (80050fc <HAL_MspInit+0x54>)
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	4a0a      	ldr	r2, [pc, #40]	; (80050fc <HAL_MspInit+0x54>)
 80050d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050d8:	6413      	str	r3, [r2, #64]	; 0x40
 80050da:	4b08      	ldr	r3, [pc, #32]	; (80050fc <HAL_MspInit+0x54>)
 80050dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050e2:	603b      	str	r3, [r7, #0]
 80050e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80050e6:	2200      	movs	r2, #0
 80050e8:	210f      	movs	r1, #15
 80050ea:	f06f 0001 	mvn.w	r0, #1
 80050ee:	f7fb fb1b 	bl	8000728 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80050f2:	bf00      	nop
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	40023800 	.word	0x40023800

08005100 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a0b      	ldr	r2, [pc, #44]	; (800513c <HAL_TIM_Base_MspInit+0x3c>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d10d      	bne.n	800512e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005112:	2300      	movs	r3, #0
 8005114:	60fb      	str	r3, [r7, #12]
 8005116:	4b0a      	ldr	r3, [pc, #40]	; (8005140 <HAL_TIM_Base_MspInit+0x40>)
 8005118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511a:	4a09      	ldr	r2, [pc, #36]	; (8005140 <HAL_TIM_Base_MspInit+0x40>)
 800511c:	f043 0301 	orr.w	r3, r3, #1
 8005120:	6453      	str	r3, [r2, #68]	; 0x44
 8005122:	4b07      	ldr	r3, [pc, #28]	; (8005140 <HAL_TIM_Base_MspInit+0x40>)
 8005124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	60fb      	str	r3, [r7, #12]
 800512c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800512e:	bf00      	nop
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	40010000 	.word	0x40010000
 8005140:	40023800 	.word	0x40023800

08005144 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b08e      	sub	sp, #56	; 0x38
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800514c:	2300      	movs	r3, #0
 800514e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005154:	2300      	movs	r3, #0
 8005156:	60fb      	str	r3, [r7, #12]
 8005158:	4b33      	ldr	r3, [pc, #204]	; (8005228 <HAL_InitTick+0xe4>)
 800515a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515c:	4a32      	ldr	r2, [pc, #200]	; (8005228 <HAL_InitTick+0xe4>)
 800515e:	f043 0310 	orr.w	r3, r3, #16
 8005162:	6413      	str	r3, [r2, #64]	; 0x40
 8005164:	4b30      	ldr	r3, [pc, #192]	; (8005228 <HAL_InitTick+0xe4>)
 8005166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005168:	f003 0310 	and.w	r3, r3, #16
 800516c:	60fb      	str	r3, [r7, #12]
 800516e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005170:	f107 0210 	add.w	r2, r7, #16
 8005174:	f107 0314 	add.w	r3, r7, #20
 8005178:	4611      	mov	r1, r2
 800517a:	4618      	mov	r0, r3
 800517c:	f7fd ffe6 	bl	800314c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005186:	2b00      	cmp	r3, #0
 8005188:	d103      	bne.n	8005192 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800518a:	f7fd ffcb 	bl	8003124 <HAL_RCC_GetPCLK1Freq>
 800518e:	6378      	str	r0, [r7, #52]	; 0x34
 8005190:	e004      	b.n	800519c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005192:	f7fd ffc7 	bl	8003124 <HAL_RCC_GetPCLK1Freq>
 8005196:	4603      	mov	r3, r0
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800519c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800519e:	4a23      	ldr	r2, [pc, #140]	; (800522c <HAL_InitTick+0xe8>)
 80051a0:	fba2 2303 	umull	r2, r3, r2, r3
 80051a4:	0c9b      	lsrs	r3, r3, #18
 80051a6:	3b01      	subs	r3, #1
 80051a8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80051aa:	4b21      	ldr	r3, [pc, #132]	; (8005230 <HAL_InitTick+0xec>)
 80051ac:	4a21      	ldr	r2, [pc, #132]	; (8005234 <HAL_InitTick+0xf0>)
 80051ae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80051b0:	4b1f      	ldr	r3, [pc, #124]	; (8005230 <HAL_InitTick+0xec>)
 80051b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80051b6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80051b8:	4a1d      	ldr	r2, [pc, #116]	; (8005230 <HAL_InitTick+0xec>)
 80051ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051bc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80051be:	4b1c      	ldr	r3, [pc, #112]	; (8005230 <HAL_InitTick+0xec>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051c4:	4b1a      	ldr	r3, [pc, #104]	; (8005230 <HAL_InitTick+0xec>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80051ca:	4b19      	ldr	r3, [pc, #100]	; (8005230 <HAL_InitTick+0xec>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80051d0:	4817      	ldr	r0, [pc, #92]	; (8005230 <HAL_InitTick+0xec>)
 80051d2:	f7fd ffed 	bl	80031b0 <HAL_TIM_Base_Init>
 80051d6:	4603      	mov	r3, r0
 80051d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80051dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d11b      	bne.n	800521c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80051e4:	4812      	ldr	r0, [pc, #72]	; (8005230 <HAL_InitTick+0xec>)
 80051e6:	f7fe f833 	bl	8003250 <HAL_TIM_Base_Start_IT>
 80051ea:	4603      	mov	r3, r0
 80051ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80051f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d111      	bne.n	800521c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80051f8:	2036      	movs	r0, #54	; 0x36
 80051fa:	f7fb fab1 	bl	8000760 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2b0f      	cmp	r3, #15
 8005202:	d808      	bhi.n	8005216 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8005204:	2200      	movs	r2, #0
 8005206:	6879      	ldr	r1, [r7, #4]
 8005208:	2036      	movs	r0, #54	; 0x36
 800520a:	f7fb fa8d 	bl	8000728 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800520e:	4a0a      	ldr	r2, [pc, #40]	; (8005238 <HAL_InitTick+0xf4>)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6013      	str	r3, [r2, #0]
 8005214:	e002      	b.n	800521c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800521c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8005220:	4618      	mov	r0, r3
 8005222:	3738      	adds	r7, #56	; 0x38
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	40023800 	.word	0x40023800
 800522c:	431bde83 	.word	0x431bde83
 8005230:	2000015c 	.word	0x2000015c
 8005234:	40001000 	.word	0x40001000
 8005238:	20000000 	.word	0x20000000

0800523c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800523c:	b480      	push	{r7}
 800523e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005240:	e7fe      	b.n	8005240 <NMI_Handler+0x4>

08005242 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005242:	b480      	push	{r7}
 8005244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005246:	e7fe      	b.n	8005246 <HardFault_Handler+0x4>

08005248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800524c:	e7fe      	b.n	800524c <MemManage_Handler+0x4>

0800524e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800524e:	b480      	push	{r7}
 8005250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005252:	e7fe      	b.n	8005252 <BusFault_Handler+0x4>

08005254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005254:	b480      	push	{r7}
 8005256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005258:	e7fe      	b.n	8005258 <UsageFault_Handler+0x4>

0800525a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800525a:	b480      	push	{r7}
 800525c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800525e:	bf00      	nop
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6); // should call the
 800526c:	4802      	ldr	r0, [pc, #8]	; (8005278 <TIM6_DAC_IRQHandler+0x10>)
 800526e:	f7fe f85f 	bl	8003330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005272:	bf00      	nop
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	2000015c 	.word	0x2000015c

0800527c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8005280:	4802      	ldr	r0, [pc, #8]	; (800528c <OTG_HS_IRQHandler+0x10>)
 8005282:	f7fb fd51 	bl	8000d28 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8005286:	bf00      	nop
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	200001a4 	.word	0x200001a4

08005290 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8005294:	4802      	ldr	r0, [pc, #8]	; (80052a0 <DMA2D_IRQHandler+0x10>)
 8005296:	f7fb fa71 	bl	800077c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800529a:	bf00      	nop
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	2000011c 	.word	0x2000011c

080052a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80052a4:	b480      	push	{r7}
 80052a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80052a8:	4b06      	ldr	r3, [pc, #24]	; (80052c4 <SystemInit+0x20>)
 80052aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ae:	4a05      	ldr	r2, [pc, #20]	; (80052c4 <SystemInit+0x20>)
 80052b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80052b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80052b8:	bf00      	nop
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	e000ed00 	.word	0xe000ed00

080052c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80052c8:	480d      	ldr	r0, [pc, #52]	; (8005300 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80052ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80052cc:	f7ff ffea 	bl	80052a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80052d0:	480c      	ldr	r0, [pc, #48]	; (8005304 <LoopForever+0x6>)
  ldr r1, =_edata
 80052d2:	490d      	ldr	r1, [pc, #52]	; (8005308 <LoopForever+0xa>)
  ldr r2, =_sidata
 80052d4:	4a0d      	ldr	r2, [pc, #52]	; (800530c <LoopForever+0xe>)
  movs r3, #0
 80052d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80052d8:	e002      	b.n	80052e0 <LoopCopyDataInit>

080052da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80052da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80052dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80052de:	3304      	adds	r3, #4

080052e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80052e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80052e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80052e4:	d3f9      	bcc.n	80052da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80052e6:	4a0a      	ldr	r2, [pc, #40]	; (8005310 <LoopForever+0x12>)
  ldr r4, =_ebss
 80052e8:	4c0a      	ldr	r4, [pc, #40]	; (8005314 <LoopForever+0x16>)
  movs r3, #0
 80052ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80052ec:	e001      	b.n	80052f2 <LoopFillZerobss>

080052ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80052ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80052f0:	3204      	adds	r2, #4

080052f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80052f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80052f4:	d3fb      	bcc.n	80052ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80052f6:	f000 f8af 	bl	8005458 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80052fa:	f7ff fe39 	bl	8004f70 <main>

080052fe <LoopForever>:

LoopForever:
  b LoopForever
 80052fe:	e7fe      	b.n	80052fe <LoopForever>
  ldr   r0, =_estack
 8005300:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8005304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005308:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800530c:	080054fc 	.word	0x080054fc
  ldr r2, =_sbss
 8005310:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8005314:	20000584 	.word	0x20000584

08005318 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005318:	e7fe      	b.n	8005318 <ADC_IRQHandler>

0800531a <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b082      	sub	sp, #8
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8005328:	4618      	mov	r0, r3
 800532a:	f7fe fcf5 	bl	8003d18 <USBH_LL_IncTimer>
}
 800532e:	bf00      	nop
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b082      	sub	sp, #8
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8005344:	4618      	mov	r0, r3
 8005346:	f7fe fd39 	bl	8003dbc <USBH_LL_Connect>
}
 800534a:	bf00      	nop
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b082      	sub	sp, #8
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8005360:	4618      	mov	r0, r3
 8005362:	f7fe fd4e 	bl	8003e02 <USBH_LL_Disconnect>
}
 8005366:	bf00      	nop
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b082      	sub	sp, #8
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	460b      	mov	r3, r1
 8005378:	70fb      	strb	r3, [r7, #3]
 800537a:	4613      	mov	r3, r2
 800537c:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8005384:	4618      	mov	r0, r3
 8005386:	f7fe fd6e 	bl	8003e66 <USBH_LL_NotifyURBChange>
#endif
}
 800538a:	bf00      	nop
 800538c:	3708      	adds	r7, #8
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b082      	sub	sp, #8
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7fe fce3 	bl	8003d6c <USBH_LL_PortEnabled>
}
 80053a6:	bf00      	nop
 80053a8:	3708      	adds	r7, #8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b082      	sub	sp, #8
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80053bc:	4618      	mov	r0, r3
 80053be:	f7fe fcef 	bl	8003da0 <USBH_LL_PortDisabled>
}
 80053c2:	bf00      	nop
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b084      	sub	sp, #16
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80053d2:	2300      	movs	r3, #0
 80053d4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80053d6:	2300      	movs	r3, #0
 80053d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7fb fdb1 	bl	8000f48 <HAL_HCD_Stop>
 80053e6:	4603      	mov	r3, r0
 80053e8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80053ea:	7bfb      	ldrb	r3, [r7, #15]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 f807 	bl	8005400 <USBH_Get_USB_Status>
 80053f2:	4603      	mov	r3, r0
 80053f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80053f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	4603      	mov	r3, r0
 8005408:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800540a:	2300      	movs	r3, #0
 800540c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800540e:	79fb      	ldrb	r3, [r7, #7]
 8005410:	2b03      	cmp	r3, #3
 8005412:	d817      	bhi.n	8005444 <USBH_Get_USB_Status+0x44>
 8005414:	a201      	add	r2, pc, #4	; (adr r2, 800541c <USBH_Get_USB_Status+0x1c>)
 8005416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541a:	bf00      	nop
 800541c:	0800542d 	.word	0x0800542d
 8005420:	08005433 	.word	0x08005433
 8005424:	08005439 	.word	0x08005439
 8005428:	0800543f 	.word	0x0800543f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800542c:	2300      	movs	r3, #0
 800542e:	73fb      	strb	r3, [r7, #15]
    break;
 8005430:	e00b      	b.n	800544a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8005432:	2302      	movs	r3, #2
 8005434:	73fb      	strb	r3, [r7, #15]
    break;
 8005436:	e008      	b.n	800544a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8005438:	2301      	movs	r3, #1
 800543a:	73fb      	strb	r3, [r7, #15]
    break;
 800543c:	e005      	b.n	800544a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800543e:	2302      	movs	r3, #2
 8005440:	73fb      	strb	r3, [r7, #15]
    break;
 8005442:	e002      	b.n	800544a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8005444:	2302      	movs	r3, #2
 8005446:	73fb      	strb	r3, [r7, #15]
    break;
 8005448:	bf00      	nop
  }
  return usb_status;
 800544a:	7bfb      	ldrb	r3, [r7, #15]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3714      	adds	r7, #20
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <__libc_init_array>:
 8005458:	b570      	push	{r4, r5, r6, lr}
 800545a:	4d0d      	ldr	r5, [pc, #52]	; (8005490 <__libc_init_array+0x38>)
 800545c:	4c0d      	ldr	r4, [pc, #52]	; (8005494 <__libc_init_array+0x3c>)
 800545e:	1b64      	subs	r4, r4, r5
 8005460:	10a4      	asrs	r4, r4, #2
 8005462:	2600      	movs	r6, #0
 8005464:	42a6      	cmp	r6, r4
 8005466:	d109      	bne.n	800547c <__libc_init_array+0x24>
 8005468:	4d0b      	ldr	r5, [pc, #44]	; (8005498 <__libc_init_array+0x40>)
 800546a:	4c0c      	ldr	r4, [pc, #48]	; (800549c <__libc_init_array+0x44>)
 800546c:	f000 f826 	bl	80054bc <_init>
 8005470:	1b64      	subs	r4, r4, r5
 8005472:	10a4      	asrs	r4, r4, #2
 8005474:	2600      	movs	r6, #0
 8005476:	42a6      	cmp	r6, r4
 8005478:	d105      	bne.n	8005486 <__libc_init_array+0x2e>
 800547a:	bd70      	pop	{r4, r5, r6, pc}
 800547c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005480:	4798      	blx	r3
 8005482:	3601      	adds	r6, #1
 8005484:	e7ee      	b.n	8005464 <__libc_init_array+0xc>
 8005486:	f855 3b04 	ldr.w	r3, [r5], #4
 800548a:	4798      	blx	r3
 800548c:	3601      	adds	r6, #1
 800548e:	e7f2      	b.n	8005476 <__libc_init_array+0x1e>
 8005490:	080054f4 	.word	0x080054f4
 8005494:	080054f4 	.word	0x080054f4
 8005498:	080054f4 	.word	0x080054f4
 800549c:	080054f8 	.word	0x080054f8

080054a0 <memcpy>:
 80054a0:	440a      	add	r2, r1
 80054a2:	4291      	cmp	r1, r2
 80054a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80054a8:	d100      	bne.n	80054ac <memcpy+0xc>
 80054aa:	4770      	bx	lr
 80054ac:	b510      	push	{r4, lr}
 80054ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054b6:	4291      	cmp	r1, r2
 80054b8:	d1f9      	bne.n	80054ae <memcpy+0xe>
 80054ba:	bd10      	pop	{r4, pc}

080054bc <_init>:
 80054bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054be:	bf00      	nop
 80054c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054c2:	bc08      	pop	{r3}
 80054c4:	469e      	mov	lr, r3
 80054c6:	4770      	bx	lr

080054c8 <_fini>:
 80054c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ca:	bf00      	nop
 80054cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ce:	bc08      	pop	{r3}
 80054d0:	469e      	mov	lr, r3
 80054d2:	4770      	bx	lr
